<?php

use Nether\Atlantis;
use Nether\Avenue;
use Nether\Blog;
use Nether\Common;
use Nether\Surface;
use Nether\User;

/**
 * @var Atlantis\Engine $App
 * @var Atlantis\Struct\TemplateHelper $Util
 * @var Avenue\Router $Router
 * @var Surface\Engine $Surface
 * @var User\EntitySession $User
 *
 * @var Blog\Routes\BlogEditorWeb $Route
 * @var Common\Datastore $Trail
 * @var Blog\Blog $Blog
 * @var Blog\BlogUser $BlogUser,
 * @var Blog\Post $Post
 */

$GetPostValue = function(string $What) use($Post) {

	if(!$Post)
	return '';

	if($What === 'DateTimeCreated')
	return (
		($Post->DateCreated)
		->Get(DateTime::RFC2822)
	);

	if(!property_exists($Post, $What))
	return '';

	return $Post->{$What};
};

$GetPostExtraData = function(string $What) use($Post) {

	if(!$Post)
	return '';

	return $Post->GetExtraData($What);
};

$Surface->Area('dashboard/__header', [ 'Trail'=> $Trail ]);

$OpenAdminNotes ??= $Surface->Get('Blog.PostEditor.OpenAdminNotes') ?? FALSE;

?>

<div class="container-fluid gx-0 mb-4">
	<?php $Surface->Area('blog/widgets/blog-header', [ 'Blog'=> $Blog ]) ?>
</div>

<div id="PostEditor" class="container"
	data-blog-id="<?php $Util->Print($Blog->ID) ?>"
	data-blog-uuid="<?php $Util->Print($Blog->UUID) ?>"
	data-post-id="<?php $Util->Print($GetPostValue('ID')) ?>"
	data-post-uuid="<?php $Util->Print($GetPostValue('UUID')) ?>"
>

	<!-- POST TITLE -->
	<div class="mb-4">
		<div class="fw-bold tt-upper">Title</div>
		<div>
			<input type="text" name="Title" class="form-control" placeholder="Title..." value="<?php $Util->Print($GetPostValue('Title')) ?>" />
		</div>
	</div>

	<!-- POST CONTENT -->
	<div class="mb-4">
		<div class="fw-bold tt-upper">Content</div>
		<div class="atl-editorjs" data-blog-id="<?php $Util->Print($Blog->ID) ?>" data-post-id="<?php $Util->Print($GetPostValue('ID')) ?>">
			<div class="atl-editorjs-source d-none"><?php $Util->Print($GetPostValue('Content')) ?></div>
			<div id="<?php $Util->Print(sprintf('atl-ejsm-%s', Common\UUID::V7())) ?>" class="atl-editorjs-mount"></div>
		</div>
	</div>
	<hr />

	<!-- POST IMAGE -->
	<div class="row gap-4 mb-4">
		<div class="col-12">
			<div class="fw-bold tt-upper">Post Image</div>
			<div>
				[upload button]
			</div>
		</div>
	</div>
	<hr />

	<!-- POST VISIBLITY -->
	<div class="row gap-4 mb-4">
		<div class="col-12">
			<div class="fw-bold tt-upper">Publish Status</div>
			<div>
				<select name="Enabled" class="form-select">
					<option value="0" <?php $Util->Print($Util->GetSelectedHTML($GetPostValue('Enabled') === 0)) ?>>Draft</option>
					<option value="1" <?php $Util->Print($Util->GetSelectedHTML($GetPostValue('Enabled') === 1)) ?>>Published</option>
				</select>
			</div>
		</div>
		<div class="col-12">
			<div class="fw-bold tt-upper">Publish Date</div>
			<div class="fs-small o-50 mb-2">Setting the status to Published and this for the future will schedule this post for that date/time.</div>
			<div class="row g-3">
				<div class="col"><input name="DateCreated" type="datetime-local" class="form-control" data-value="<?php $Util->Print($GetPostValue('DateTimeCreated')) ?>" /></div>
				<div class="col-auto">
					<button class="btn btn-dark CmdRefreshPublishDate">
						<i class="mdi mdi-clock"></i>
						Now
					</button>
				</div>
				<div class="col-auto">
					<button class="btn btn-dark CmdResetPublishDate">
						<i class="mdi mdi-skip-previous"></i>
						Reset
					</button>
				</div>
			</div>
		</div>
	</div>
	<hr />

	<!-- POST ADMIN NOTES -->
	<div class="Collapser <?php $Util->Print($OpenAdminNotes ? 'Open' : '') ?>">
		<header>
			<div>
				Admin Notes
			</div>
			<span class="Indicator"><i class="mdi mdi-plus-thick"></i></span>
		</header>
		<section>
			<div class="mb-4">
				<div>
					<textarea name="ExtraData[AdminNotes]" class="form-control" rows="10" placeholder="Admin Notes..."><?php $Util->Print($GetPostExtraData('AdminNotes')) ?></textarea>
				</div>
			</div>
		</section>
	</div>
	<hr />

	<!-- POST TAGS -->
	<div class="Collapser">
		<header>
			<div>
				Tags
			</div>
			<span class="Indicator"><i class="mdi mdi-plus-thick"></i></span>
		</header>
		<section>
			<div class="mb-4">
				<div>
					<input type="text" name="Tags" class="form-control" placeholder="Search..." value="<?php $Util->Print($GetPostValue('Tags')) ?>" />
				</div>
			</div>
		</section>
	</div>
	<hr />

	<!-- POST SOURCE INFO -->
	<div class="Collapser">
		<header>
			<div>
				Source Information
			</div>
			<span class="Indicator"><i class="mdi mdi-plus-thick"></i></span>
		</header>
		<section>
			<!-- SOURCE INFO -->
			<div class="row gap-4 mb-4">
				<div class="col-12">
					<div class="fw-bold tt-upper">Source URL</div>
					<div>
						<input type="text" name="ExtraData[SourceURL]" class="form-control" placeholder="Source URL..." value="<?php $Util->Print($GetPostExtraData('SourceURL')) ?>" />
					</div>
				</div>
				<div class="col-12">
					<div class="fw-bold tt-upper">Source Date</div>
					<div>
						<input type="date" name="ExtraData[SourceDate]" class="form-control" placeholder="Source Date..." value="<?php $Util->Print($GetPostExtraData('SourceDate')) ?>" />
					</div>
				</div>
				<div class="col-12">
					<div class="form-check form-switch">
						<label class="d-flex gap-2 align-items-center form-check-label cursor-pointer">
							<input type="checkbox" name="ExtraData[SourceDateSort]" class="form-check-input" <?php $Util->Print($Util->GetCheckedHTML($GetPostExtraData('SourceDateSort') === 'y')) ?>>
							<span class="fw-bold tt-upper" style="user-select:none;">Sort By Source Date?</span>
						</label>
					</div>

				</div>
			</div>
		</section>
	</div>
	<hr />

	<!-- SAVE BUTTON -->
	<div class="mb-4">
		<div class="row justify-content-end">
			<div class="col-auto">
				<button type="submit" class="atl-statebtn atl-state-default">
					<section class="btn btn-primary fs-large default">
						<i class="mdi mdi-fw mdi-content-save"></i>
						Save
					</section>
					<section class="btn btn-primary fs-large processing">
						<i class="mdi mdi-fw mdi-loading mdi-spin-fast"></i>
						Saving...
					</section>
					<section class="btn btn-success fs-large success">
						<i class="mdi mdi-fw mdi-check"></i>
						Success
					</section>
					<section class="btn btn-danger fs-large error">
						<i class="mdi mdi-fw mdi-close"></i>
						Error
					</section>
				</button>
			</div>
		</div>
	</div>

</div>

<script type="module">
import API         from '/share/nui/api/json.js';
import Util        from '/share/nui/util.js';
import Collapser   from '/share/nui/util/collapser.js';
import EditorBlock from '/share/atlantis/js/editor-block.js';
import TagSearch   from '/share/atlantis/js/field-tag-search.js';
import BlogPost    from '/share/atlantis/js/ents/blogpost.js';
import { DateTime } from '/share/atlantis/lib/date/luxon.js';

class PostEditor {

	constructor(selector) {

		this.apiPostMethod = 'POST';
		this.apiPostURL = '/api/blogpost/entity';

		this.apiPatchMethod = 'PATCH';
		this.apiPatchURL = '/api/blogpost/entity';

		this.apiGetTagsMethod = 'TAGSGET';
		this.apiGetTagsURL = '/api/prototype/entity';

		this.apiPatchTagsMethod = 'TAGSPATCH';
		this.apiPatchTagsURL = '/api/prototype/entity';

		////////

		this.element = jQuery(selector);
		this.blogID = parseInt(this.element.attr('data-blog-id')) || null;
		this.blogUUID = this.element.attr('data-blog-uuid');
		this.postID = parseInt(this.element.attr('data-post-id')) || null;
		this.postUUID = this.element.attr('data-post-uuid');

		this.editor = EditorBlock.Boot(this.element.find('.atl-editorjs:nth(0)'));
		this.tagSearch = TagSearch.Boot(this.element.find('[name="Tags"]'));

		this.inTitle = this.element.find('[name="Title"]');
		this.inDateCreated = this.element.find('[name="DateCreated"]');

		this.inAdminNotes = this.element.find('[name="ExtraData[AdminNotes]"]');
		this.inSourceURL = this.element.find('[name="ExtraData[SourceURL]"]');
		this.inSourceDate = this.element.find('[name="ExtraData[SourceDate]"]');
		this.inSourceDateSort = this.element.find('[name="ExtraData[SourceDateSort]"]');

		this.inEnabled = this.element.find('[name="Enabled"]');
		this.btnSubmit = this.element.find('button[type=submit]');
		this.btnRefreshPublishDate = this.element.find('.CmdRefreshPublishDate');
		this.btnResetPublishDate = this.element.find('.CmdResetPublishDate');

		////////

		this.init();

		return;
	};

	init() {

		if(this.postUUID);
		this.tagSearch.fetchCurrentTags(this.postUUID);

		this.btnSubmit.on('click', this.onSave.bind(this));
		this.btnRefreshPublishDate.on('click', this.refreshPublishDate.bind(this));
		this.btnResetPublishDate.on('click', this.resetPublishDate.bind(this));

		if(!this.inDateCreated.attr('data-value'))
		this.btnResetPublishDate.parent().addClass('d-none');

		////////

		this.resetPublishDate();

		if(!this.inDateCreated.val())
		this.refreshPublishDate();

		return;
	};

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	async onSave() {

		this.setStateProcessing();

		////////

		let post = new BlogPost;
		let content = await this.editor.save();
		let tagsFound = this.tagSearch.getSelectedTags();
		let tagsFresh = this.tagSearch.getNewTags();

		////////

		post.id = this.postID;
		post.blogID = this.blogID;
		post.editor = 'editorjs';
		post.title = jQuery.trim(this.inTitle.val());
		post.content = JSON.stringify(content);
		post.enabled = parseInt(this.inEnabled.val());

		if(Util.VON(this.inDateCreated.val()) !== null)
		post.dateCreated = DateTime.fromISO(this.inDateCreated.val());
		else
		post.dateCreated = DateTime.now();

		post.extraData.AdminNotes = jQuery.trim(this.inAdminNotes.val());
		post.extraData.SourceURL = jQuery.trim(this.inSourceURL.val());
		post.extraData.SourceDate = jQuery.trim(this.inSourceDate.val());
		post.extraData.SourceDateSort = (
			this.inSourceDateSort.is(':checked')
			? 'y' : 'n'
		);

		////////

		let api = this.startNewRequestForPost(post);

		(api.send(post.toFormData()))
		.then(this.onSaveApplyTags.bind(this))
		.then((report)=> (location.href = report.post.payload.PageURL))
		.catch(api.catch);

		return;
	};

	async onSaveApplyTags(result) {

		let api = this.startNewRequestForPostTags();
		let data = new FormData;

		data.append('EntityUUID', result.payload.UUID);
		data.append('EntityType', 'Blog.Post');
		data.append('TagID', this.tagSearch.getSelectedTags());
		data.append('TagName', this.tagSearch.getNewTags());

		let chain = (
			(api.send(data))
			.then((r)=> ({ post: result, tags: r }))
		);

		return chain;
	};

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	startNewRequestForPost(post) {

		let api = new API.Request(
			this.apiPostMethod,
			this.apiPostURL
		);

		//console.log(post);

		if(post.id !== null) {
			api.method = this.apiPatchMethod;
			api.url = this.apiPatchURL;
		}

		return api;
	};

	startNewRequestForPostTags(post) {

		let api = new API.Request(
			this.apiPatchTagsMethod,
			this.apiPatchTagsURL
		);

		return api;
	};

	setStateDefault() {

		(this.btnSubmit)
		.removeClass('atl-state-processing atl-state-success atl-state-error')
		.addClass('atl-state-default');

		return;
	};

	setStateError() {

		(this.btnSubmit)
		.removeClass('atl-state-processing atl-state-success atl-state-default')
		.addClass('atl-state-error');

		return;
	};

	setStateProcessing() {

		(this.btnSubmit)
		.removeClass('atl-state-default atl-state-success atl-state-error')
		.addClass('atl-state-processing');

		return;
	};

	setStateSuccess() {

		(this.btnSubmit)
		.removeClass('atl-state-processing atl-state-default atl-state-error')
		.addClass('atl-state-success');

		return;
	};

	refreshPublishDate() {

		let ldate = DateTime.now().set({ second: 0, millisecond: 0 });

		this.inDateCreated.val(ldate.toISO({
			includeOffset: false,
			suppressSeconds: true,
			suppressMilliseconds: true
		}));

		return;
	};

	resetPublishDate() {

		let vdate = this.inDateCreated.attr('data-value');

		if(typeof vdate === 'undefined')
		return;

		if(vdate === '')
		return;

		let ldate = (
			DateTime
			.fromRFC2822(vdate)
			.toLocal()
			.set({ second: 0, millisecond: 0 })
		);

		this.inDateCreated.val(ldate.toISO({
			includeOffset: false,
			suppressSeconds: true,
			suppressMilliseconds: true
		}));

		return;
	};

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	displayErrorMessage(title, content, resetSaveBtn=false) {

		let self = this;
		let funcResetSaveBtn = null;
		let dialog = null;

		////////

		if(resetSaveBtn)
		funcResetSaveBtn = (function(d) {
			d.destroy();
			self.setSaveBtnDefault();
			return;
		});

		////////

		dialog = new DialogUtil.Window(new DialogUtil.WindowConfig({
			title: title,
			body: content,
			show: true,
			labelAccept: null,
			labelCancel: null,
			onAccept: funcResetSaveBtn,
			onCancel: funcResetSaveBtn
		}));

		dialog.addButton('OK', 'btn-danger', 'accept');

		return;
	};

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	static Multiboot(mass) {

		let ctype = this;

		jQuery(mass)
		.each(function() {
			ctype.Boot(this);
			return;
		});

		return;
	};

	static Boot(which='#PostEditor') {

		return new this.prototype.constructor(which);
	};

};

jQuery(function() {
	PostEditor.Boot();
	Collapser.Boot('#PostEditor .Collapser');
	return;
});

</script>
