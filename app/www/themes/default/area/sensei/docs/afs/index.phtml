<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Surface;

/**
 * @var Routes\Docs $Route
 * @var Common\Datastore $Pages
 * @var Surface\Engine $Surface
 */

$Surface->Area('sensei/docs/__header', [
	'Title' => 'Atlantis From Scratch',
	'Trail' => [
		Atlantis\Struct\Item::New(Title: 'Install & Setup')
	]
]);

?>

<div class="cargobay">

	<!-- INTRO -->
	<section class="pt-0">
		<div class="container">
			<h2>System Overview</h2>
			<hr />

			<p>
				Most of these are not hard requirements.
				Deviations will require adjustments be made to work with whatever you prefer to use instead.
				The project itself and all documentation is written expecting an environment that smells simliar to this.
				This is due to how Linux distros tend to compile their own opinions into things, such as where services should look for config files.
			</p>
			<dl class="fs-large mb-4">
				<dd class="pl-2">
					<i class="mdi mdi-desktop-classic"></i>
					Ubuntu (20+)
					<ul class="text-muted fs-small fst-italic">
						<li>This distro tends to stay current enough with PHP these days. The most important thing was it has packages for all the modules needed.</li>
					</ul>
				</dd>
				<dd class="pl-2">
					<i class="mdi mdi-horse-variant"></i>
					Apache 2.4
					<ul class="text-muted fs-small fst-italic">
						<li>Ubuntu symlinks Apache configs into <code class="path">/etc/apache2/sites-enabled</code>.</li>
					</ul>
				</dd>
				<dd class="pl-2">
					<i class="mdi mdi-elephant"></i>
					PHP 8.1+
					<ul class="text-muted fs-small fst-italic">
						<li class="mb-2">
							<span class="fw-bold">Required Modules:</span>
							cli, common, curl, imagick, mbstring,
							memcache, mysql, opcache, xml, zip.
						</li>
						<li class="mb-2">
							Ubuntu compiles almost all PHP features as separate packages.
							This is where you will see the most variation between Linux distros.
							Some will compile everything into fewer larger packages, some compile it all into many small packages.
						</li>
						<li class="mb-0">
							Ubuntu stores PHP configurations in <code class="path">/etc/php/&lt;major&gt;.&ltminor&gt;/apache2</code>.
							They contain a <code class="file">php.ini</code> file and <code class="var">conf.d</code> directory you can drop additional ini files into.
						</li>
					</ul>
				</dd>
				<dd class="pl-2">
					<i class="mdi mdi-database"></i>
					MariaDB or MySQL 5.x (optional)
					<ul class="text-muted fs-small fst-italic">
						<li>Database is completely optional if you need one or not.</li>
					</ul>
				</dd>
			</dl>

			<blockquote class="jumbotron rounded p-4">
				<dl class="mb-4">
					<dt class="mb-2">Tips:</dt>
					<dd class="mb-4">
						<i class="mdi mdi-chevron-right"></i>
						Add <code class="path">./vendor/bin</code> to your <code class="var">PATH</code> to gain easy access to vendor scripts
						<code class="cli">$ project.atl</code>, <code class="cli">$ dev.atl</code>,
						etc, without typing the full path to it.
						All examples will be making use of this.
					</dd>
					<dd class="mb-0">
						<i class="mdi mdi-chevron-right"></i>
						The <code class="var">.atl</code> commands have help to see more info.
						Example: <code class="cli">$ project.atl help db</code> will show all the possible db command arguments.
					</dd>
				</dl>

			</blockquote>
		</div>
	</section>

	<!-- INSTALL -->
	<section>
		<div class="container">
			<h2>Installation and Setup</h2>
			<hr />

			<div class="mb-6">
				<p>
					This project is under active development and is still depending on rolling source repository checkouts.
					The following <code class="file">composer.json</code> settings are required to install and update.
					They will be set automatically via the project bootstrapping.
				</p>
				<div><code class="var">"minimum-stability: "dev",</code></div>
				<div><code class="var">"prefer-stable": true</code></div>
			</div>

			<h3>Bootstrap Project Directory</h3>
			<div class="mb-6">
				<p>This will fetch some basic structure including a pre-configured <code class="file">composer.json</code>.</p>
				<div class="mb-2"><code class="cli">$ git clone https://github.com/netherphp/project app</code></div>
				<div class="mb-2"><code class="cli">$ cd app</code></div>
				<div class="mb-0"><code class="cli">$ rm -rf .git</code></div>
			</div>

			<h3>Install Framework</h3>
			<div class="mb-6">
				<div class="mb-4">
					<p>Download the framework and dependencies.</p>
					<code class="cli">$ composer require netherphp/atlantis dev-master</code>
				</div>
				<div class="mb-4">
					<p>Set everything up. This will bootstrap a bare bones project to build upon in the project directory.</p>
					<code class="cli">$ project.atl init -y</code>
				</div>
				<div class="mb-0">
					<p>Update the autoloader, grabbing any last second updates along the way.</p>
					<code class="cli">$ composer update</code>
				</div>
			</div>

			<h3>Edit Config</h3>
			<div class="mb-6">
				<div class="mb-4">
					The primary configuration is found in the <code class="file">conf/config.php</code> file.
					Update the <code class="var">ConfProjectID</code>, <code class="var">ConfProjectName</code>, and <code class="var">ConfProjectDomain</code> as a minimum.
					Additionally there are environment specific config <code class="file">config/env/dev/config.php</code> for settings that may need to be specific to your local environment, for example a test domain or API keys.
				</div>
				<div class="mb-4">
					To make a new configuration environment, for example a <code class="var">prod</code> environment, copy the <code class="var">dev</code> environment and make any required changes.
					<code class="cli">$ cp -r conf/env/dev conf/env/prod</code>
				</div>
				<div class="mb-0">
					To set the current environment name, for example to <code class="var">prod</code>: <code class="cli">$ echo "prod" > env.lock</code>
				</div>
			</div>

			<h3>Run Demo</h3>
			<div class="mb-6">
				<p>
					At this point PHP's built-in web server should be able to serve the application over basic HTTP.
					That can be tested with the following command:
				</p>

				<code class="cli">
					$ php -S localhost:8080 -t www
				</code>
			</div>

			<h3>Use Simple Parking Page</h3>
			<div>
				<p>
					The framework comes with a theme called <code class="var">soon</code> that will display a simple coming soon page to quickly park a project.
					Within <code class="file">conf/config.php</code> set <code class="var">Surface\Library::ConfThemes</code> to <code>[ 'local', 'soon', 'default' ]</code>.
					The Themes work together as a stack. If you want to customise the parking page the version in <code class="var">soon</code> can be copied into <code class="path">local</code>, edited, and it will be loaded instead due to the order of the themes set.
					Here is an example of adding that line after the Avenue configuration settings.
				</p>

				<code class="quotron quotron-primary d-block">
				($Config)<br />
				->Set(Atlantis\Key::ConfLibraries, [ ])<br />
				->Set(Avenue\Library::ConfRouteFile, $App->FromProjectRoot('routes.phson'))<br />
				->Set(Avenue\Library::ConfRouteRoot, $App->FromProjectRoot('routes'))<br />
				->Set(Surface\Library::ConfThemes, [ 'local', 'soon', 'default' ]);
				</code>

			</div>

		</div>
	</section>

	<!-- DATABASE -->
	<section>
		<div class="container">
			<h2>Database Configuration</h2>
			<hr />

			<dl class="mb-0">
				<dt class="mb-2">Configure the Default connection.</dt>
				<dd><code class="cli">$ project.atl db --set --host=localhost --db=dbname --user=dbuser --pass=dbpass</code></dd>
			</dl>
		</div>
	</section>

	<!-- WEB SERVER -->
	<section>
		<div class="container">
			<h2>Web Server (Apache2)</h2>
			<hr />

			<dl class="mb-4">
				<dt>Configure Web Server (Apache)</dt>
				<dd>If this is the initial setup, it will be easier to say no to SSL to start with.</dd>
				<dd><code class="cli">$ web.atl config</code></dd>
				<dd><code class="cli">$ web.atl setup</code></dd>
				<dd><code class="cli">$ web.atl reload</code></dd>
			</dl>

			<div>
				At this point the real web server should be able to
				serve the application over basic HTTP.
			</div>

		</div>
	</section>

	<!-- SSL CERTS -->
	<section>
		<div class="container">
			<h2>SSL Certificates from acme.sh</h2>
			<hr />

			<h4>Install acme.sh</h4>
			<p>There is an opinionated install script to get <code>acme.sh</code> installed.</p>
			<code class="d-block cli mb-4">$ sh vendor/netherphp/atlantis/tools/acmesh-install-linux.sh email@for-ssl.notifications</code>
			<ul>
				<li>Installs to <code class="path">/opt/acmesh</code>.</li>
				<li>Confs located at <code class="path">/opt/acmesh/local/confs</code>.</li>
				<li>Certs located at <code class="path">/opt/acmesh/local/certs</code>.</li>
				<li>The email address provided to the installer script will be sent to your SSL provider, which they will use to warn you about expiry issues.</li>
			</ul>
			<hr />

			<h4>Issue SSL Certificate (via Magic DNS API)</h4>
			<p>
				A list of the DNS hosts supported by <code>acme.sh</code> via DNS API and how to configure them can be found <a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">here</a>.
				Atlantis comes with DNS scripts for DigitalOcean and Porkbun.
				Copy the ones you need out and edit them to fill in the required information for that host.
			</p>
			<ul>
				<li class="mb-2"><code class="cli d-block">$ cp vendor/netherphp/atlantis/templates/acmesh-issue-docean.txt bin/ssl.sh</code></li>
				<li class="mb-0"><code class="cli d-block">$ cp vendor/netherphp/atlantis/templates/acmesh-issue-porkbun.txt bin/ssl.sh</code></li>
			</ul>
			<p>
				Any SSL issue done in this method will only ever actually be used once.
				After the initial issue <code>acme.sh</code> will track what is needed to perform future renewals.
				It is however advisable to keep your issue script laying around in the event you need to expand upon it, such as adding alternate domains your project might want to answer for.
			</p>
			<p>Other modes of fetching certs with <tt>acme.sh</tt> can be found <a href="https://github.com/acmesh-official/acme.sh">here</a>.</p>
			<hr />

			<h4>Renew SSL Certificate</h4>
			<p>
				<code>acme.sh</code> should have automatically added a cron job for handling renewals.
				This can be checked with <code class="cli">$ crontab -l</code>.
				It should look simliar to this:
			</p>
			<div class="jumbotron rounded p-4 mb-4">
				<code class="d-block">
					20 4 * * * "/opt/acmesh"/acme.sh --cron --home "/opt/acmesh" --config-home "/opt/acmesh/local/confs" > /dev/null
				</code>
			</div>
			<p>
				The cron can be reinstalled with <code class="cli">$ acme.sh --install-cronjob</code>.
			</p>
		</div>
	</section>

</div>

