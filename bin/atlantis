<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

define('Atlantis', new Nether\Atlantis\Engine(getcwd()));
/** @constant Nether\Atlantis\Engine Atlantis */

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

class AtlantisCLI
extends Console\Client {

	const
	AppName    = 'Nether Atlantis',
	AppVersion = '5.0.0-dev';

	#[Console\Meta\Command]
	#[Console\Meta\Info('Start a fresh project from scratch.')]
	public function
	Init():
	int {

		$this->InitGitIgnore();
		$this->InitCommonFiles();

		$this->ComposerDumpAutoload();
		$this->PrintLn('Done.');

		return 0;
	}

	#[Console\Meta\Command(Hide: TRUE)]
	#[Console\Meta\Info('Add things this framework knows you need to .gitignore')]
	public function
	InitGitIgnore():
	int {

		$this->FormatLn(
			'%s %s',
			$this->FormatPrimary('[Atlantis]'),
			'Setup Git Ignore...'
		);

		$File = Common\Filesystem\Util::Pathify(getcwd(), '.gitignore');
		$Ignore = new Atlantis\Util\GitIgnoreTool($File);

		$Ignore->Append([
			'/env.lock',
			'/backups',
			'/logs',
			'/temp',
			'/vendor',
			'/www/.well-known'
		]);

		$Ignore->Write();

		return 0;
	}

	#[Console\Meta\Command(Hide: TRUE)]
	#[Console\Meta\Info('Copy in core files for reference by local app.')]
	#[Console\Meta\Toggle('-y', 'Say yes to everything. This WILL OVERWRITE core files with stock versions!')]
	#[Console\Meta\Error(1, 'failed to copy file')]
	public function
	InitCommonFiles():
	int {

		$this->FormatLn(
			'%s %s',
			$this->FormatPrimary('[Atlantis]'),
			'Setup Common Files...'
		);

		$Force = (bool)$this->GetOption('y');
		$CWD = getcwd();
		$Root = dirname(__FILE__, 2);
		$ConfirmFile = NULL;
		$Copy = Atlantis\Util::CopyWithConfirm("{$Root}/app", $CWD, $Force);

		foreach($Copy as $ConfirmFile) {
			if(is_string($ConfirmFile)) {
				$Copy->Send($this->PromptTrue(
					sprintf(
						'%s Overwrite %s?',
						$this->FormatPrimary('[Atlantis::InitCommonFiles]'),
						$ConfirmFile
					),
					$this->Formatter->BoldMagenta('[y/N]:')
				));

				continue;
			}
		}

		return 0;
	}

	#[Console\Meta\Command('acmephp-config')]
	#[Console\Meta\Info('Generate a new acmephp.yml file for SSL reg.')]
	#[Console\Meta\Value('--filename', 'Filename of config file (default: acmephp.yml)')]
	#[Console\Meta\Toggle('--raw', 'Only print the config contents.')]
	#[Console\Meta\Toggle('--verbose', 'Show the contents of the file too.')]
	#[Console\Meta\Error(1, 'missing ssl config: %s')]
	#[Console\Meta\Error(2, 'conf not writable: %s')]
	public function
	AcmePhpGenerate():
	int {

		$Filename = $this->GetOption('filename') ?? 'acmephp.yml';
		$Raw = $this->GetOption('raw') ?? FALSE;
		$Verbose = $Raw ?: ($this->GetOption('verbose') ?? FALSE);
		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Acme = new Nether\Atlantis\Struct\AcmeConfig($App);
		$TemplatePath = sprintf(
			'%s/templates/acmephp.txt',
			dirname(__FILE__, 2)
		);

		////////

		$MissingConf = $Acme->GetMissingConfig();

		if(count($MissingConf))
		$this->Quit(1, join(', ', $MissingConf));

		////////

		$Data = $Acme->GenerateConfigData($TemplatePath);

		if($Verbose && !$Raw) {
			$this->PrintLn($this->Formatter->{$this->ColourPrimary}('Generated acmephp.yml:'));
			$this->PrintLn();
		}

		if($Verbose)
		$this->PrintLn($Data);

		if($Raw)
		return 0;

		////////

		if($Filename) {
			$Outfile = sprintf('%s/%s', $App->GetEnvConfigRoot(), $Filename);

			// do not overwrite existing file unless user says so.

			if(file_exists($Outfile))
			if($this->PromptEquals("Overwrite {$Outfile}?", '(y/n)>', 'n'))
			$this->Quit(0);

			// check for write fail on existing file.

			if(file_exists($Outfile) && !is_writable($Outfile))
			$this->Quit(2, $Outfile);

			// write file to disk.

			$this->PrintLn("Writing AcmePHP Config: {$Outfile}");
			file_put_contents($Outfile, $Data);
		}

		return 0;
	}

	#[Console\Meta\Command('acmephp-run')]
	#[Console\Meta\Info('Run the AcmePHP for the current env.')]
	#[Console\Meta\Value('--filename', 'Filename of config file in environment config (default: acmephp.yml).')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Toggle('--rehash', 'Automatically rehash the webserver after.')]
	public function
	AcmePhpRun():
	int {

		$Filename = $this->GetOption('filename') ?? 'acmephp.yml';
		$UseSudo = $this->GetOption('sudo') ?? FALSE;
		$UseRehash = $this->GetOption('rehash') ?? FALSE;
		$Command = NULL;
		$Output = NULL;
		$Error = NULL;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Acme = new Nether\Atlantis\Struct\AcmeConfig($App);

		////////

		$Command = sprintf(
			'%s run %s 2>&1',
			$Acme->Phar,
			$App->GetEnvConfigRoot($Filename)
		);

		////////

		$Result = $this->ExecuteCommandLine($Command);

		if($Result->Error) {
			$this->PrintLn($this->FormatPrimary('Command Output:'));
			$Result->Print('> ');
			return $Result->Error;
		}

		if($UseRehash)
		$this->WebserverRehash();

		return 0;
	}

	#[Console\Meta\Command('webserver-link')]
	#[Console\Meta\Info('Symlink our web config into the webserver config system.')]
	#[Console\Meta\Value('--filename', 'Config file to link in. (ex. conf/env/dev/apache24.conf).')]
	#[Console\Meta\Value('--destdir', 'Directory to link into (ex. /etc/apache2/sites-enabled).')]
	#[Console\Meta\Value('--destname', 'Name to link as (ex. 100-dev-app.conf).')]
	#[Console\Meta\Toggle('--copy', 'Copy instead of symlinking.')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Error(1, 'unsupported Project.WebServerType (%s)')]
	#[Console\Meta\Error(2, 'directory unwritable - maybe run with sudo')]
	public function
	WebserverLink():
	int {

		$Filename = $this->GetOption('filename');
		$DestDir = $this->GetOption('destdir');
		$DestName = $this->GetOption('destname');
		$UseCopy = $this->GetOption('copy') ?? FALSE;
		$UseSudo = $this->GetOption('sudo') ?? FALSE;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Source = NULL;
		$DestPath = NULL;

		////////

		// @todo 2022-09-08 move this to a dedicated server configuration
		// class structure where it will be cleaner to go even deeper like
		// trying to make things easy based on detecte distro config. my
		// defaults atm are all expecting debian styled systems.

		switch($App->Config['Project.WebServerType']) {
			case 'apache':
			case 'apache24':
				$Source = $Filename ?? $App->GetEnvConfigRoot('apache24.conf');
				$DestDir = $DestDir ?? '/etc/apache2/sites-enabled';

				// apache decides which vhost to execute based on the
				// first match it finds that is willing where the
				// config files are sorted alphabetically. you should
				// not typically run dev, demo, and prod, all on the
				// same server but its a lot cheaper to do so when you
				// are just a project.

				// prod envs typically are going to respond to:
				// domain.tld & *.domain.tld

				// so we want our dev.domain.tld and demo.domain.tld
				// to respond before the wildcards do.

				if(!$DestName)
				$DestName = sprintf(
					'%s-%s-%s.conf',
					(match(TRUE){
						$App->IsDev()  => 100,
						$App->IsProd() => 900,
						default        => 500
					}),
					Nether\Avenue\Util::MakeKey($App->GetProjectEnv()),
					Nether\Avenue\Util::MakeKey($App->Config['Project.Key'])
				);
			break;
			default:
				$this->Quit(1, $App->Config['Project.WebServerType'] ?: 'NULL');
			break;
		}

		////////

		$DestPath = "{$DestDir}/{$DestName}";

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Config:'),
			$Source
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Dest:'),
			$DestPath
		));

		if(file_exists($DestPath))
		if($this->PromptEquals("Overwrite {$DestPath}? ", '(y/n)>', 'n'))
		$this->Quit(0);

		if(!is_writable(dirname($DestPath)))
		$this->Quit(2);

		////////

		// clean up the old file.

		if(file_exists($DestPath))
		unlink($DestPath);

		// source in the new file.

		if($UseCopy)
		copy(realpath($Source), $DestPath);

		else
		symlink(realpath($Source), $DestPath);

		////////

		return 0;
	}

	#[Console\Meta\Command('webserver-rehash')]
	#[Console\Meta\Info('Get the web server to reload its config files.')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Error(1, 'unsupported Project.WebServerType (%s)')]
	public function
	WebserverRehash():
	int {

		$UseSudo = $this->GetOption('sudo') ?? FALSE;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Command = NULL;

		////////

		switch($App->Config['Project.WebServerType']) {
			case 'apache':
			case 'apache24':
				$Command = 'apachectl graceful 2>&1';
			break;
			default:
				$this->Quit(1, $App->Config['Project.WebServerType'] ?? 'NULL');
			break;
		}

		$Result = $this->ExecuteCommandLine($Command);

		if($Result->Error) {
			$this->PrintLn($this->FormatPrimary('Command Output:'));
			$Result->Print('> ');
		}

		return $Result->Error;
	}

	#[Console\Meta\Command('env')]
	#[Console\Meta\Info('Show what the configured Env is.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	#[Console\Meta\Value('--set', 'Set the Environment name.')]
	public function
	GetProjectEnv():
	int {

		$EnvInfo = $this->GetOption('verbose');
		$EnvSet = trim($this->GetOption('set') ?? '');
		$App = NULL;
		$EnvFile = sprintf('%s/env.lock', $this->GetProjectDirectory());
		$EnvName = NULL;
		$EnvType = NULL;

		////////

		if($EnvSet) {
			if(file_exists($EnvFile)) {
				if(!is_writable($EnvFile))
				throw new Nether\Atlantis\Error\EnvLockUnwritable($EnvFile);
			}

			else {
				if(!is_writable(dirname($EnvFile)))
				throw new Nether\Atlantis\Error\EnvLockUnwritable($EnvFile);
			}

			file_put_contents($EnvFile, $EnvSet);
		}

		////////

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$EnvName = $App->GetProjectEnv();
		$EnvType = $App->GetProjectEnvType();

		if(!$EnvInfo) {
			echo $EnvName, PHP_EOL;
			return 0;
		}

		////////

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Env:'),
			$EnvName
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Type:'),
			$EnvType
		));

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Info('Regenerate all image thumbnails.')]
	public function
	ImageRegen():
	int {

		$Page = 1;
		$PageCount = PHP_INT_MAX;
		$Which = $this->GetInput(1);
		$Timer = new Common\Timer;
		$TotalTime = 0.0;

		while($Page <= $PageCount) {

			$Result = Atlantis\Media\File::Find([
				'Type' => Atlantis\Media\File::TypeImg,
				'Page' => $Page
			]);

			$this->FormatLn(
				'==== Page %d of %d ====',
				$Result->Page,
				$Result->PageCount
			);

			foreach($Result as $File) {
				/** @var Atlantis\Media\File $File */

				if($Which && $File->UUID !== $Which)
				continue;

				$this->FormatLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Regenerating'),
					$File->ID,
					$File->UUID
				));

				////////

				$this->FormatLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Cleaning Extra Files'),
					$File->ID,
					$File->UUID
				));

				$Timer->Reset();
				$TotalTime += $Timer(fn()=> $File->CleanExtraFiles());
				$this->FormatLn(
					$this->FormatSecondary('> %.3fs'),
					$Timer->Time,
				);

				////////

				$this->FormatLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Rendering Extra Files'),
					$File->ID,
					$File->UUID
				));

				$Timer->Reset();
				$TotalTime += $Timer(fn()=> $File->GenerateExtraFiles());
				$this->FormatLn(
					$this->FormatSecondary('> %.3fs'),
					$Timer->Time,
				);

				////////

				$this->FormatLn(
					$this->FormatSecondary('> Run Time: %.3fs'),
					$TotalTime
				);

				$this->PrintLn();
			}

			$PageCount = $Result->PageCount;
			$Page += 1;
		}

		return 0;
	}

	#[Console\Meta\Command]
	public function
	CleanUplDir():
	int {

		$Storage = Atlantis->Storage->Get('Default');


		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitStatus():
	int {

		$Verbose = (bool)$this->GetOption('--verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%s" status --porcelain 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitShove():
	int {

		$Verbose = (bool)$this->GetOption('--verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%1$s" add . 2>&1 && git -C "%1$s" commit -m "thusfar" 2>&1 && git -C "%1$s" push 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitYoink():
	int {

		$Verbose = (bool)$this->GetOption('--verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%1$s" pull 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Fixes various annoyances with git config on my repos that really grind my gears.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitConfig():
	int {

		$Verbose = (bool)$this->GetOption('Verbose');
		$Global = $this->GetOption('Global');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$GitCommandsToRun = [
			'config core.filemode 0',
			'config core.pager ""',
			'config tag.sort version:refname'
		];

		$Dir = NULL;
		$Git = NULL;
		$GitCmd = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			foreach($GitCommandsToRun as $GitCmd) {
				$Git = match($Global) {
					TRUE => sprintf(
						'git %1$s 2>&1',
						str_replace('config ', 'config --global ', $GitCmd)
					),
					default => sprintf(
						'git -C "%1$s" %2$s 2>&1',
						Nether\Atlantis\Util::Repath("{$Dir}"),
						$GitCmd
					)
				};

				$Result = $this->ExecuteCommandLine($Git);

				if(count($Result->Output)) {
					$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

					if($Verbose)
					$this->PrintLn($this->FormatSecondary($Git));

					echo PHP_EOL, join(PHP_EOL, $Result->Output);
					echo PHP_EOL, PHP_EOL;
				}
			}

			if($Global)
			break;
		}


		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	ComposerDumpAutoload():
	static {

		// making it so we could load composer up and talk to its api
		// requires adding composer/composer as a composer requirement.
		// double composering your system. that sounds bad and annoying
		// to manage. so we will do it the old fashioned shitty way for
		// now until someone convinces me otherwise.

		$Result = $this->ExecuteCommandLine('composer dump-autoload');

		$this->PrintLn('Composer said:');
		$Result->Print('> ');

		return $this;
	}

	protected function
	GetProjectDirectory():
	string {

		$BinPath = Nether\Atlantis\Util::Repath(dirname(__FILE__));
		$CurPath = Nether\Atlantis\Util::Repath(getcwd());

		// if it looks like we in a project directory assume we are in
		// the project directory.

		if(file_exists(sprintf('%s/composer.lock', $CurPath)))
		if(str_starts_with($BinPath, $CurPath))
		return $CurPath;

		// if we are elsewhere but calling this installed as a vendor
		// binary assume that the project directory is up from that.

		if(str_ends_with($BinPath, 'vendor/netherphp/atlantis/bin'))
		return dirname(__FILE__, 5);

		// else just yolo with the current path again.

		return $CurPath;
	}

}

exit((new AtlantisCLI)->Run());
