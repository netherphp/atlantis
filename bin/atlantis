<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;
use Nether\Storage;
use Nether\User;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

class AtlantisCLI
extends Console\Client {

	const
	AppName    = 'Nether Atlantis',
	AppVersion = '5.0.0-dev',
	AppDebug   = TRUE;

	protected Atlantis\Engine
	$App;

	protected function
	OnReady():
	void {

		$this->App = new Atlantis\Engine(getcwd());

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Toggle('--dirs', 'Only setup directories.')]
	#[Console\Meta\Toggle('--links', 'Only setup symlinks.')]
	#[Console\Meta\Toggle('--rewrite', 'Rewrite/Update the config file.')]
	public function
	Setup():
	int {

		$OptDirs = $this->GetOption('Dirs') ?? FALSE;
		$OptLinks = $this->GetOption('Links') ?? FALSE;
		$OptRewrite = $this->GetOption('Rewrite') ?? FALSE;

		if(!$OptDirs && !$OptLinks && !$OptRewrite)
		$OptDirs = $OptLinks = TRUE;

		$Project = Atlantis\Struct\AtlantisProjectJSON::FromFile(
			Common\Filesystem\Util::Pathify(
				$this->App->GetProjectRoot(),
				'atlantis.json'
			)
		);

		$this->PrintLn();

		if($OptDirs)
		$this->SetupProjectDirs($Project);

		if($OptLinks)
		$this->SetupProjectLinks($Project);

		if($OptRewrite) {
			$this->PrintLn('Rewriting atlantis.json...');
			$Project->Write();
		}

		$this->PrintLn();
		return 0;
	}

	protected function
	SetupProjectDirs(Atlantis\Struct\AtlantisProjectJSON $Project):
	static {

		$Dir = NULL;
		$Path = NULL;
		$Reports = new Common\Datastore;

		////////

		$this->FormatLn(
			'Atlantis::SetupProjectDirs',
			Bold: TRUE, Underline: TRUE, Lines: 2
		);

		foreach($Project->Dirs as $Dir) {
			/** @var Common\Filesystem\Directory $Dir */

			$Path = $this->App->FromProjectRoot($Dir->Path);

			if(is_link($Path)) {
				$Reports->Push((object)[
					'Prefix'=> 'HM', 'Dir'=> $Dir, 'Status'=> 'primary',
					'Message'=> sprintf('exists as symlink to %s', readlink($Path))
				]);

				continue;
			}

			if(is_dir($Path)) {
				$Reports->Push((object)[
					'Prefix'=> 'OK', 'Dir'=> $Dir, 'Status'=> TRUE
				]);

				continue;
			}

			if(!file_exists($Path))
			if(Common\Filesystem\Util::MkDir($Path, $Dir->Mode)) {
				$Reports->Push((object)[
					'Prefix'  => 'OK', 'Dir'=> $Dir, 'Status'=> TRUE,
					'Message' => 'NEW'
				]);

				continue;
			}

			$Reports->Push((object)[
				'Prefix' => 'ER',
				'Dir'    => $Dir,
				'Status' => FALSE
			]);

			continue;
		}

		$Reports->Each(function(object $Row) {

			$Fmt1 = $this->GetFormatForStatus($Row->Status);
			$Fmt2 = $this->GetFormatForStatus($Row->Status, 'alt1');

			$this->PrintLn(sprintf(
				'[%s] %s%s',
				$this->Format($Row->Prefix, ...$Fmt1),
				$Row->Dir->Path,
				(property_exists($Row, 'Message')
					? $this->Format(" ({$Row->Message})", ...$Fmt2)
					: ''
				)
			));

			return;
		});

		$this->PrintLn();
		return $this;
	}

	protected function
	SetupProjectLinks(Atlantis\Struct\AtlantisProjectJSON $Project):
	static {

		$Link = NULL;
		$Path = NULL;
		$Source = NULL;
		$Reports = new Common\Datastore;

		////////

		$this->FormatLn(
			'Atlantis::SetupProjectLinks',
			Bold: TRUE, Underline: TRUE, Lines: 2
		);

		foreach($Project->Links as $Link) {
			/** @var Common\Filesystem\Symlink $Link */

			$Path = $this->App->FromProjectRoot($Link->Path);
			$Source = $this->App->FromProjectRoot($Link->Source);

			if(is_link($Path)) {
				if(Common\Filesystem\Util::IsLinkTo($Path, $Source)) {
					$Reports->Push((object)[
						'Prefix'=> 'OK', 'Link'=> $Link, 'Status'=> TRUE
					]);

					continue;
				}

				$Reports->Push((object)[
					'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
					'Message'=> sprintf('exists as symlink to %s', readlink($Path))
				]);

				continue;
			}

			if(is_dir($Path)) {
				$Reports->Push((object)[
					'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
					'Message'=> 'exists as normal directory'
				]);

				continue;
			}

			if(is_file($Path)) {
				$Reports->Push((object)[
					'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
					'Message'=> 'exists as normal file'
				]);

				continue;
			}

			if(symlink($Source, $Path)) {
				$Reports->Push((object)[
					'Prefix'  => 'OK',
					'Link'    => $Link,
					'Status'  => TRUE,
					'Message' => 'NEW'
				]);

				continue;
			}

			$Reports->Push((object)[
				'Prefix' => 'ER',
				'Link'   => $Link,
				'Status' => FALSE
			]);

			continue;
		}

		$Reports->Each(function(object $Row) {

			$Fmt1 = $this->GetFormatForStatus($Row->Status);
			$Fmt2 = $this->GetFormatForStatus($Row->Status, 'alt1');

			$this->PrintLn(sprintf(
				'[%s] %s%s',
				$this->Format($Row->Prefix, ...$Fmt1),
				$Row->Link->Path,
				(property_exists($Row, 'Message')
					? $this->Format(" ({$Row->Message})", ...$Fmt2)
					: ''
				)
			));

			return;
		});

		$this->PrintLn();
		return $this;
	}

	#[Console\Meta\Command('dir-add')]
	#[Console\Meta\Info('Adds Directory config to atlantis.json. Run SETUP to apply changes.')]
	#[Console\Meta\Arg('path', 'The directory to create.')]
	#[Console\Meta\Error(1, 'The Path must be specified.')]
	#[Console\Meta\Error(2, 'There is already an item with that Path configured.')]
	public function
	ProjectDirAdd():
	int {

		$Path = rtrim(($this->GetInput(1) ?: ''), DIRECTORY_SEPARATOR);
		$Project = NULL;
		$Old = NULL;

		if(!$Path)
		$this->Quit(1);

		////////

		$Project = Atlantis\Struct\AtlantisProjectJSON::FromFile(
			Common\Filesystem\Util::Pathify(
				$this->App->GetProjectRoot(),
				'atlantis.json'
			)
		);

		// if there is an old entry with this path name already then it
		// should bail, unless both the path and the source are the same
		// as what is already configured then i want it to just accept you
		// for who you are.

		$Old = $Project->Dirs->Distill(
			fn(Common\Filesystem\Directory $L)
			=> $L->Path === $Path
		);

		if(!$Old->Count()) {
			$Project->Dirs->Push(new Common\Filesystem\Directory([
				'Path'   => $Path
			]));

			$Project->Write();
		}

		$this
		->PrintLn()
		->FormatLn(sprintf('>> %s', $Path), ...$this->GetFormatForStatus(TRUE))
		->PrintLn();

		return 0;
	}

	#[Console\Meta\Command('link-add')]
	#[Console\Meta\Info('Adds Symlink config to atlantis.json. Run SETUP to apply changes.')]
	#[Console\Meta\Arg('path', 'The symlink to create.')]
	#[Console\Meta\Arg('source', 'Where the symlink points.')]
	#[Console\Meta\Error(1, 'Path and Source both must be specified.')]
	#[Console\Meta\Error(2, 'There is already an Item with that path configured.')]
	public function
	ProjectSymlinkAdd():
	int {

		$Path = rtrim(($this->GetInput(1) ?: ''), DIRECTORY_SEPARATOR);
		$Source = rtrim(($this->GetInput(2) ?: ''), DIRECTORY_SEPARATOR);
		$Project = NULL;
		$Old = NULL;

		if(!$Path || !$Source)
		$this->Quit(1);

		////////

		$Project = Atlantis\Struct\AtlantisProjectJSON::FromFile(
			Common\Filesystem\Util::Pathify(
				$this->App->GetProjectRoot(),
				'atlantis.json'
			)
		);

		// if there is an old entry with this path name already then it
		// should bail, unless both the path and the source are the same
		// as what is already configured then i want it to just accept you
		// for who you are.

		$Old = $Project->Links->Distill(
			fn(Common\Filesystem\Symlink $L)
			=> $L->Path === $Path
		);

		if(!$Old->Count()) {
			$Project->Links->Push(new Common\Filesystem\Symlink([
				'Path'   => $Path,
				'Source' => $Source
			]));

			$Project->Write();
		}

		else {
			$Old->Filter(
				fn(Common\Filesystem\Symlink $L)
				=> $L->Source === $Source
			);

			if($Old->Count() === 0)
			$this->Quit(2, $Path);
		}

		$this
		->PrintLn()
		->FormatLn(sprintf('>> %s', $Path), ...$this->GetFormatForStatus(TRUE))
		->FormatLn(sprintf('=> %s', $Source), ...$this->GetFormatForStatus(TRUE, 'alt1'))
		->PrintLn();

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Info('Start a fresh project from scratch.')]
	public function
	Init():
	int {

		$this->InitGitIgnore();
		$this->InitCommonFiles();

		$this->ComposerDumpAutoload();
		$this->PrintLn('Done.');

		return 0;
	}

	#[Console\Meta\Command(Hide: TRUE)]
	#[Console\Meta\Info('Add things this framework knows you need to .gitignore')]
	public function
	InitGitIgnore():
	int {

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('[Atlantis]'),
			'Setup Git Ignore...'
		));

		$File = Common\Filesystem\Util::Pathify(getcwd(), '.gitignore');
		$Ignore = new Atlantis\Util\GitIgnoreTool($File);

		$Ignore->Append([
			'/env.lock',
			'/backups',
			'/logs',
			'/temp',
			'/vendor',
			'/www/.well-known'
		]);

		$Ignore->Write();

		return 0;
	}

	#[Console\Meta\Command(Hide: TRUE)]
	#[Console\Meta\Info('Copy in core files for reference by local app.')]
	#[Console\Meta\Toggle('-y', 'Say yes to everything. This WILL OVERWRITE core files with stock versions!')]
	#[Console\Meta\Error(1, 'failed to copy file')]
	public function
	InitCommonFiles():
	int {

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('[Atlantis]'),
			'Setup Common Files...'
		));

		$Force = (bool)$this->GetOption('y');
		$CWD = getcwd();
		$Root = dirname(__FILE__, 2);
		$ConfirmFile = NULL;
		$Copy = Atlantis\Util::CopyWithConfirm("{$Root}/app", $CWD, $Force);

		foreach($Copy as $ConfirmFile) {
			if(is_string($ConfirmFile)) {
				$Copy->Send($this->PromptTrue(
					sprintf(
						'%s Overwrite %s?',
						$this->FormatPrimary('[Atlantis::InitCommonFiles]'),
						$ConfirmFile
					),
					$this->Formatter->BoldMagenta('[y/N]:')
				));

				continue;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Copy the default theme from the package into the public web dir.')]
	#[Console\Meta\Toggle('--link', 'Symlink directories instead of copying them.')]
	#[Console\Meta\Error(1, 'Unable to locate %s')]
	public function
	SetupTheme():
	int {

		$Theme = $this->GetOption('theme') ?? 'default';
		$Link = $this->GetOption('link') ?? FALSE;
		$Method = __METHOD__;
		$Existing = NULL;

		$DestDir = (
			$this->GetOption('dest')
			?? Common\Filesystem\Util::Pathify(
				getcwd(),
				'www', 'themes', $Theme
			)
		);

		$SourceDir = Common\Filesystem\Util::Pathify(
			getcwd(),
			'vendor', 'netherphp', 'atlantis',
			'app', 'www', 'themes', $Theme
		);

		////////

		if(!file_exists($SourceDir))
		$this->Quit(1, $SourceDir);

		////////

		($this)
		->PrintLn($this->FormatPrimary("[{$Method}]"))
		->PrintLn(sprintf(
			'%s: %s',
			$this->FormatSecondary('Source'),
			$SourceDir
		))
		->PrintLn(sprintf(
			'%s: %s',
			$this->FormatSecondary('Dest'),
			$DestDir
		));

		if(is_link($DestDir)) {
			$Existing = 'link';

			($this)
			->PrintLn()
			->PrintLn($this->FormatErrorPrimary(('!! CURRENTLY EXISTS AS A SYMLINK')))
			->PrintLn($this->FormatErrorSecondary(readlink($DestDir)));
		}

		elseif(is_dir($DestDir)) {
			$Existing = 'dir';

			($this)
			->PrintLn()
			->PrintLn($this->FormatErrorPrimary('!! CURRENTLY EXISTS AS A DIRECTORY'));
		}

		$this->PrintLn();

		if($this->PromptTrue('Proceed?', '[y/N]')) {

			// handle clearing out the old.

			if($Existing === 'link')
			unlink($DestDir);

			elseif($Existing === 'dir')
			Common\Filesystem\Util::RmDir($DestDir);

			// handle dropping in the new.

			if($Link) {
				$this->PrintLn(sprintf(
					'%s %s',
					$this->FormatSecondary('Linking'),
					$DestDir
				));

				symlink($SourceDir, $DestDir);
			}

			else {
				$this->PrintLn(sprintf(
					'%s %s...',
					$this->FormatSecondary('Copying'),
					$DestDir
				));

				Atlantis\Util::Copy($SourceDir, $DestDir);
			}

			$this->PrintLn();
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Copy the shared resources from the package into the public web dir.')]
	#[Console\Meta\Toggle('--link', 'Symlink directories instead of copying them.')]
	#[Console\Meta\Error(1, 'Unable to locate %s')]
	#[Console\Meta\Error(2, 'Destination exists and is not a directory %s')]
	#[Console\Meta\Error(3, 'Unable to create destination directory %s')]
	public function
	SetupShare():
	int {

		$ShareDirs = [ 'atlantis', 'nui' ];

		$DestPrefix = (
			$this->GetOption('dest')
			?? Common\Filesystem\Util::Pathify(
				getcwd(), 'www', 'share'
			)
		);

		$SourcePrefix = Common\Filesystem\Util::Pathify(
			getcwd(),
			'vendor', 'netherphp', 'atlantis',
			'app', 'www', 'share'
		);

		$Link = $this->GetOption('link') ?? FALSE;

		////////

		$Method = __METHOD__;
		$Existing = NULL;
		$DestDir = NULL;
		$SourceDir = NULL;
		$Dir = NULL;

		////////

		if(file_exists($DestPrefix) && !is_dir($DestPrefix))
		$this->Quit(2, $DestPrefix);

		if(!file_exists($DestPrefix))
		Common\Filesystem\Util::MkDir($DestPrefix);

		if(!is_dir($DestPrefix))
		$this->Quit(3, $DestPrefix);

		////////

		foreach($ShareDirs as $Dir) {
			$DestDir = Common\Filesystem\Util::Pathify($DestPrefix, $Dir);
			$SourceDir = Common\Filesystem\Util::Pathify($SourcePrefix, $Dir);
			$Existing = NULL;

			clearstatcache($DestDir);

			if(!file_exists($SourceDir))
			$this->Quit(1, $SourceDir);

			////////

			($this)
			->PrintLn($this->FormatPrimary("[{$Method}]"))
			->PrintLn(sprintf(
				'%s: %s',
				$this->FormatSecondary('Source'),
				$SourceDir
			))
			->PrintLn(sprintf(
				'%s: %s',
				$this->FormatSecondary('Dest'),
				$DestDir
			));

			////////

			if(is_link($DestDir)) {
				$Existing = 'link';

				($this)
				->PrintLn()
				->PrintLn(sprintf(
					'%s',
					$this->FormatErrorPrimary('CURRENTLY EXISTS AS A SYMLINK')
				))
				->PrintLn(sprintf(
					'%s %s',
					$this->FormatErrorSecondary('!!'),
					$this->FormatErrorSecondary(readlink($DestDir))
				));
			}

			elseif(is_dir($DestDir)) {
				$Existing = 'dir';

				($this)
				->PrintLn()
				->PrintLn($this->FormatErrorPrimary('CURRENTLY EXISTS AS A DIRECTORY'));
			}

			////////

			$this->PrintLn();

			if($this->PromptTrue('Proceed?', '[y/N]')) {

				// handle clearing out the old.

				if($Existing === 'link')
				unlink($DestDir);

				elseif($Existing === 'dir')
				Common\Filesystem\Util::RmDir($DestDir);

				// handle dropping in the new.

				if($Link) {
					$this->PrintLn(sprintf(
						'%s %s...',
						$this->FormatSecondary('Symlinking'),
						$DestDir
					));

					symlink($SourceDir, $DestDir);
				}

				else {
					$this->PrintLn(sprintf(
						'%s %s...',
						$this->FormatSecondary('Copying'),
						$DestDir
					));

					Atlantis\Util::Copy($SourceDir, $DestDir);
				}

				$this->PrintLn();
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Error(1, 'no Temp location defined')]
	#[Console\Meta\Error(2, 'no Default location defined')]
	#[Console\Meta\Error(3, '%s already exists as a directory')]
	#[Console\Meta\Error(4, '%s already exists as a file')]
	#[Console\Meta\Error(5, '%s is a symlink but pointing to the wrong place %s (expected %s)')]
	public function
	SetupUpload():
	int {

		$Storage = $this->App->Storage->Location('Default');

		if(!($Storage instanceof Storage\Adaptors\Local))
		throw new Exception('only supports local storage atm.');

		$Source = $Storage->GetPath('upl');
		$Link = Common\Filesystem\Util::Pathify(
			$this->App->GetWebRoot(),
			'data', 'upl'
		);

		$PDir = dirname($Link);

		if(is_file($PDir))
		$this->Quit(4, $PDir);

		if(!is_dir($PDir))
		Common\Filesystem\Util::MkDir($PDir);

		////////

		if(file_exists($Link)) {
			if(is_link($Link)) {
				if(readlink($Link) !== $Source)
				$this->Quit(5, $Link, readlink($Link), $Source);
			}

			elseif(is_dir($Link))
			$this->Quit(3, $Link);

			elseif(is_file($Link))
			$this->Quit(4, $Link);
		}

		else
		symlink($Source, $Link);

		////////

		$this->PrintLn(sprintf(
			'%s Source=> %s, Link=> %s',
			$this->FormatPrimary('[SetupUpload]'),
			$Source,
			$Link
		));

		return 0;
	}

	#[Console\Meta\Command('acmephp-config')]
	#[Console\Meta\Info('Generate a new acmephp.yml file for SSL reg.')]
	#[Console\Meta\Value('--filename', 'Filename of config file (default: acmephp.yml)')]
	#[Console\Meta\Toggle('--raw', 'Only print the config contents.')]
	#[Console\Meta\Toggle('--verbose', 'Show the contents of the file too.')]
	#[Console\Meta\Error(1, 'missing ssl config: %s')]
	#[Console\Meta\Error(2, 'conf not writable: %s')]
	public function
	AcmePhpGenerate():
	int {

		$Filename = $this->GetOption('filename') ?? 'acmephp.yml';
		$Raw = $this->GetOption('raw') ?? FALSE;
		$Verbose = $Raw ?: ($this->GetOption('verbose') ?? FALSE);
		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Acme = new Nether\Atlantis\Struct\AcmeConfig($App);
		$TemplatePath = sprintf(
			'%s/templates/acmephp.txt',
			dirname(__FILE__, 2)
		);

		////////

		$MissingConf = $Acme->GetMissingConfig();

		if(count($MissingConf))
		$this->Quit(1, join(', ', $MissingConf));

		////////

		$Data = $Acme->GenerateConfigData($TemplatePath);

		if($Verbose && !$Raw) {
			$this->PrintLn($this->Formatter->{$this->ColourPrimary}('Generated acmephp.yml:'));
			$this->PrintLn();
		}

		if($Verbose)
		$this->PrintLn($Data);

		if($Raw)
		return 0;

		////////

		if($Filename) {
			$Outfile = sprintf('%s/%s', $App->GetEnvConfigRoot(), $Filename);

			// do not overwrite existing file unless user says so.

			if(file_exists($Outfile))
			if($this->PromptEquals("Overwrite {$Outfile}?", '(y/n)>', 'n'))
			$this->Quit(0);

			// check for write fail on existing file.

			if(file_exists($Outfile) && !is_writable($Outfile))
			$this->Quit(2, $Outfile);

			// write file to disk.

			$this->PrintLn("Writing AcmePHP Config: {$Outfile}");
			file_put_contents($Outfile, $Data);
		}

		return 0;
	}

	#[Console\Meta\Command('acmephp-run')]
	#[Console\Meta\Info('Run the AcmePHP for the current env.')]
	#[Console\Meta\Value('--filename', 'Filename of config file in environment config (default: acmephp.yml).')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Toggle('--rehash', 'Automatically rehash the webserver after.')]
	public function
	AcmePhpRun():
	int {

		$Filename = $this->GetOption('filename') ?? 'acmephp.yml';
		$UseSudo = $this->GetOption('sudo') ?? FALSE;
		$UseRehash = $this->GetOption('rehash') ?? FALSE;
		$Command = NULL;
		$Output = NULL;
		$Error = NULL;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Acme = new Nether\Atlantis\Struct\AcmeConfig($App);

		////////

		$Command = sprintf(
			'%s run %s 2>&1',
			$Acme->Phar,
			$App->GetEnvConfigRoot($Filename)
		);

		////////

		$Result = $this->ExecuteCommandLine($Command);

		if($Result->Error) {
			$this->PrintLn($this->FormatPrimary('Command Output:'));
			$Result->Print('> ');
			return $Result->Error;
		}

		if($UseRehash)
		$this->WebserverRehash();

		return 0;
	}

	#[Console\Meta\Command('apple-auth-info')]
	#[Console\Meta\Info('Generate what you need to Copy-Paste into Apple Developer to make Auth work into their stupid comma seperated Textarea.')]
	public function
	AppleAuthInfo():
	int {

		$Domain = (
			$this->GetOption('Domain')
			?? Atlantis->Config[ Atlantis\Library::ConfProjectDomain ]
		);

		$Domains = [ $Domain ];
		$ReturnURLs = [];

		////////

		if(substr_count($Domain, '.') === 1)
		$Domains[] = "www.{$Domain}";

		////////

		foreach($Domains as $Dom)
		$ReturnURLs[] = "https://{$Dom}/auth/apple";

		////////

		$this
		->PrintLn($this->FormatPrimary('Domains:'))
		->PrintLn(join(',', $Domains))
		->PrintLn();

		$this
		->PrintLn($this->FormatPrimary('Return URLs:'))
		->PrintLn(join(',', $ReturnURLs))
		->PrintLn();

		$this
		->PrintLn($this->FormatSecondary('[Info] Put the P8 file here:'))
		->PrintLn(sprintf('conf/env/%s/keys/apple-authkey.p8', Atlantis->GetProjectEnv()))
		->PrintLn();

		if(!Atlantis->Config[User\Library::ConfAppleID]) {
			$this
			->PrintLn($this->FormatSecondary('[Info] User\Library::ConfAppleID'))
			->PrintLn('The reverse DNS for the Service ID. Ex: tld.something.www')
			->PrintLn();
		}

		if(!Atlantis->Config[User\Library::ConfAppleTeamID]) {
			$this
			->PrintLn($this->FormatSecondary('[Info] User\Library::ConfAppleTeamID'))
			->PrintLn('The gibberish alpha-numeric ID of the Apple Developer account.')
			->PrintLn();
		}

		if(!Atlantis->Config[User\Library::ConfAppleKeyFileID]) {
			$this
			->PrintLn($this->FormatSecondary('[Info] User\Library::ConfAppleKeyFileID'))
			->PrintLn('The gibberish alpha-numeric ID of the Key File.')
			->PrintLn();
		}

		return 0;
	}

	#[Console\Meta\Command('webserver-link')]
	#[Console\Meta\Info('Symlink our web config into the webserver config system.')]
	#[Console\Meta\Value('--filename', 'Config file to link in. (ex. conf/env/dev/apache24.conf).')]
	#[Console\Meta\Value('--destdir', 'Directory to link into (ex. /etc/apache2/sites-enabled).')]
	#[Console\Meta\Value('--destname', 'Name to link as (ex. 100-dev-app.conf).')]
	#[Console\Meta\Toggle('--copy', 'Copy instead of symlinking.')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Error(1, 'unsupported Project.WebServerType (%s)')]
	#[Console\Meta\Error(2, 'directory unwritable - maybe run with sudo')]
	public function
	WebserverLink():
	int {

		$Filename = $this->GetOption('filename');
		$DestDir = $this->GetOption('destdir');
		$DestName = $this->GetOption('destname');
		$UseCopy = $this->GetOption('copy') ?? FALSE;
		$UseSudo = $this->GetOption('sudo') ?? FALSE;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Source = NULL;
		$DestPath = NULL;

		////////

		// @todo 2022-09-08 move this to a dedicated server configuration
		// class structure where it will be cleaner to go even deeper like
		// trying to make things easy based on detecte distro config. my
		// defaults atm are all expecting debian styled systems.

		switch($App->Config['Project.WebServerType']) {
			case 'apache':
			case 'apache24':
				$Source = $Filename ?? $App->GetEnvConfigRoot('apache24.conf');
				$DestDir = $DestDir ?? '/etc/apache2/sites-enabled';

				// apache decides which vhost to execute based on the
				// first match it finds that is willing where the
				// config files are sorted alphabetically. you should
				// not typically run dev, demo, and prod, all on the
				// same server but its a lot cheaper to do so when you
				// are just a project.

				// prod envs typically are going to respond to:
				// domain.tld & *.domain.tld

				// so we want our dev.domain.tld and demo.domain.tld
				// to respond before the wildcards do.

				if(!$DestName)
				$DestName = sprintf(
					'%s-%s-%s.conf',
					(match(TRUE){
						$App->IsDev()  => 100,
						$App->IsProd() => 900,
						default        => 500
					}),
					Nether\Avenue\Util::MakeKey($App->GetProjectEnv()),
					Nether\Avenue\Util::MakeKey($App->Config['Project.Key'])
				);
			break;
			default:
				$this->Quit(1, $App->Config['Project.WebServerType'] ?: 'NULL');
			break;
		}

		////////

		$DestPath = "{$DestDir}/{$DestName}";

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Config:'),
			$Source
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Dest:'),
			$DestPath
		));

		if(file_exists($DestPath))
		if($this->PromptEquals("Overwrite {$DestPath}? ", '(y/n)>', 'n'))
		$this->Quit(0);

		if(!is_writable(dirname($DestPath)))
		$this->Quit(2);

		////////

		// clean up the old file.

		if(file_exists($DestPath))
		unlink($DestPath);

		// source in the new file.

		if($UseCopy)
		copy(realpath($Source), $DestPath);

		else
		symlink(realpath($Source), $DestPath);

		////////

		return 0;
	}

	#[Console\Meta\Command('webserver-rehash')]
	#[Console\Meta\Info('Get the web server to reload its config files.')]
	#[Console\Meta\Toggle('--sudo', 'Try to run with sudo for admin needs.')]
	#[Console\Meta\Error(1, 'unsupported Project.WebServerType (%s)')]
	public function
	WebserverRehash():
	int {

		$UseSudo = $this->GetOption('sudo') ?? FALSE;

		if($UseSudo && $this->Sudo())
		return 0;

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$Command = NULL;

		////////

		switch($App->Config['Project.WebServerType']) {
			case 'apache':
			case 'apache24':
				$Command = 'apachectl graceful 2>&1';
			break;
			default:
				$this->Quit(1, $App->Config['Project.WebServerType'] ?? 'NULL');
			break;
		}

		$Result = $this->ExecuteCommandLine($Command);

		if($Result->Error) {
			$this->PrintLn($this->FormatPrimary('Command Output:'));
			$Result->Print('> ');
		}

		return $Result->Error;
	}

	#[Console\Meta\Command('env')]
	#[Console\Meta\Info('Show what the configured Env is.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	#[Console\Meta\Value('--set', 'Set the Environment name.')]
	public function
	GetProjectEnv():
	int {

		$EnvInfo = $this->GetOption('verbose');
		$EnvSet = trim($this->GetOption('set') ?? '');
		$App = NULL;
		$EnvFile = sprintf('%s/env.lock', $this->GetProjectDirectory());
		$EnvName = NULL;
		$EnvType = NULL;

		////////

		if($EnvSet) {
			if(file_exists($EnvFile)) {
				if(!is_writable($EnvFile))
				throw new Nether\Atlantis\Error\EnvLockUnwritable($EnvFile);
			}

			else {
				if(!is_writable(dirname($EnvFile)))
				throw new Nether\Atlantis\Error\EnvLockUnwritable($EnvFile);
			}

			file_put_contents($EnvFile, $EnvSet);
		}

		////////

		$App = new Nether\Atlantis\Engine($this->GetProjectDirectory());
		$EnvName = $App->GetProjectEnv();
		$EnvType = $App->GetProjectEnvType();

		if(!$EnvInfo) {
			echo $EnvName, PHP_EOL;
			return 0;
		}

		////////

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Env:'),
			$EnvName
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Type:'),
			$EnvType
		));

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Info('Regenerate all image thumbnails.')]
	public function
	ImageRegen():
	int {

		$Page = 1;
		$PageCount = PHP_INT_MAX;
		$Which = $this->GetInput(1);
		$Timer = new Common\Timer;
		$TotalTime = 0.0;

		while($Page <= $PageCount) {

			$Result = Atlantis\Media\File::Find([
				'Type' => Atlantis\Media\File::TypeImg,
				'Page' => $Page
			]);

			$this->PrintLn(sprintf(
				'==== Page %d of %d ====',
				$Result->Page,
				$Result->PageCount
			));

			foreach($Result as $File) {
				/** @var Atlantis\Media\File $File */

				if($Which && $File->UUID !== $Which)
				continue;

				$this->PrintLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Regenerating'),
					$File->ID,
					$File->UUID
				));

				////////

				$this->PrintLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Cleaning Extra Files'),
					$File->ID,
					$File->UUID
				));

				$Timer->Reset();
				$TotalTime += $Timer(fn()=> $File->CleanExtraFiles());
				$this->PrintLn(sprintf(
					$this->FormatSecondary('> %.3fs'),
					$Timer->Time,
				));

				////////

				$this->PrintLn(sprintf(
					'%s [%s] [%s]',
					$this->FormatPrimary('> Rendering Extra Files'),
					$File->ID,
					$File->UUID
				));

				$Timer->Reset();
				$TotalTime += $Timer(fn()=> $File->GenerateExtraFiles());
				$this->PrintLn(sprintf(
					$this->FormatSecondary('> %.3fs'),
					$Timer->Time,
				));

				////////

				$this->PrintLn(sprintf(
					$this->FormatSecondary('> Run Time: %.3fs'),
					$TotalTime
				));

				$this->PrintLn();
			}

			$PageCount = $Result->PageCount;
			$Page += 1;
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Empty out the temporary upload directory.')]
	#[Console\Meta\Toggle('--commit', 'Actually do the cleaning.')]
	public function
	CleanUplTmp():
	int {

		$Commit = $this->GetOption('commit');
		$Temp = $this->App->Storage->Location('Temp');
		$Iter = new Common\Filesystem\Indexer($Temp->Root, TRUE);
		$Index = new Common\Datastore;

		foreach($Iter as $Item) {
			$Path = $Item->GetPath();

			$this->PrintLn($Path);

			if(is_dir($Path))
			$Index->Push($Path);
		}

		$this->PrintLn(sprintf(
			'%s found %d temp directories',
			$this->FormatPrimary('[CleanUplTmp]'),
			$Index->Count()
		));

		if(!$Commit) {
			$this->PrintLn($this->FormatSecondary('use --commit to get it done'));
			return 0;
		}

		$Index->Each(fn(string $Path)=> Common\Filesystem\Util::RmDir($Path));

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Clean the upload data directory of anything not referenced by the database.')]
	#[Console\Meta\Toggle('--commit', 'Actually do the cleaning.')]
	public function
	CleanUplDir():
	int {

		$Commit = $this->GetOption('commit');

		// generate an index of all the directories in the upload path.

		$Data = $this->App->Storage->Location('Default');
		$Iter = new Common\Filesystem\Indexer(
			Common\Filesystem\Util::Pathify($Data->Root, 'upl')
		);

		$Index = new Common\Datastore;
		$Path = NULL;
		$Shard = NULL;

		foreach($Iter as $Item) {
			/** @var SplFileInfo $Item */

			$Path = explode(DIRECTORY_SEPARATOR, $Item->GetPathname());
			$Shard = array_pop($Path);

			$Index->Shove($Shard, $Item->GetPathname());
		}

		// flag the items in the index that should not be deleted.

		$Page = 1;
		$PageCount = PHP_INT_MAX;
		$Path = NULL;
		$Shard = NULL;

		while($Page <= $PageCount) {
			$Result = Atlantis\Media\File::Find([
				'Type' => Atlantis\Media\File::TypeImg,
				'Page' => $Page
			]);

			foreach($Result as $File) {
				/** @var Atlantis\Media\File $File */

				if(!Common\Datafilters::UUID($File->UUID))
				continue;

				$Path = explode('-', $File->UUID);
				$Shard = array_shift($Path);

				if($Index->HasKey($Shard))
				$Index[$Shard] = NULL;
			}

			$PageCount = $Result->PageCount;
			$Page += 1;
		}

		$Index->Filter(fn(?string $Item)=> $Item !== NULL);

		////////

		$this->PrintLn(sprintf(
			'%s found %d unreferenced directories',
			$this->FormatPrimary('[CleanUplDir]'),
			$Index->Count()
		));

		if(!$Commit) {
			$this->PrintLn($this->FormatSecondary('use --commit to get it done'));
			return 0;
		}

		$Index->Each(fn(string $Item) => Common\Filesystem\Util::RmDir($Item));

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('serve')]
	#[Console\Meta\Info('Run the HTTP Test Server built into PHP.')]
	#[Console\Meta\Error(1, 'Returned Error Code %d')]
	public function
	RunLocalTestServer():
	int {

		$Host = $this->GetOption('Host') ?? 'localhost';
		$Port = $this->GetOption('Port') ?? '80';

		$Path = (
			$this->GetOption('Webroot')
			?? $this->App->FromProjectRoot('www')
		);

		$Command = sprintf(
			'php -S %s:%s -t %s',
			$Host, $Port, $Path
		);

		////////

		$this->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('[RunLocalTestServer]'),
			$Command
		));

		////////

		$Cmd = $this->ExecuteCommandLine($Command, TRUE);

		if($Cmd->Error)
		$this->Quit(1, $Cmd->Error);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitStatus():
	int {

		$Verbose = (bool)$this->GetOption('--verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%s" status --porcelain 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	#[Console\Meta\Toggle('--all', 'Include the ones I usually skip.')]
	public function
	NetherGitShove():
	int {

		$Verbose = (bool)$this->GetOption('verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);
		$DoAll = $this->GetOption('all');

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(!$DoAll && str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%1$s" add . 2>&1 && git -C "%1$s" commit -m "thusfar" 2>&1 && git -C "%1$s" push 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Run git command in all repos.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitYoink():
	int {

		$Verbose = (bool)$this->GetOption('--verbose');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);
		$DoAll = $this->GetOption('all');

		$Dir = NULL;
		$Git = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			if(!$DoAll && str_ends_with($Dir, '/common'))
			continue;

			$Git = sprintf(
				'git -C "%1$s" pull 2>&1',
				Nether\Atlantis\Util::Repath("{$Dir}")
			);

			$Result = $this->ExecuteCommandLine($Git, TRUE);

			if(count($Result->Output)) {
				$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

				if($Verbose)
				$this->PrintLn($this->FormatSecondary($Git));

				echo PHP_EOL, join(PHP_EOL, $Result->Output);
				echo PHP_EOL, PHP_EOL;
			}
		}

		return 0;
	}

	#[Console\Meta\Command]
	#[Console\Meta\Info('Fixes various annoyances with git config on my repos that really grind my gears.')]
	#[Console\Meta\Toggle('--verbose', 'Show more info.')]
	public function
	NetherGitConfig():
	int {

		$Verbose = (bool)$this->GetOption('Verbose');
		$Global = $this->GetOption('Global');
		$Path = sprintf('%s/vendor/netherphp/*', getcwd());
		$Found = glob($Path);

		$GitCommandsToRun = [
			'config core.filemode 0',
			'config core.pager ""',
			'config tag.sort version:refname'
		];

		$Dir = NULL;
		$Git = NULL;
		$GitCmd = NULL;
		$Result = NULL;

		foreach($Found as $Dir) {
			foreach($GitCommandsToRun as $GitCmd) {
				$Git = match($Global) {
					TRUE => sprintf(
						'git %1$s 2>&1',
						str_replace('config ', 'config --global ', $GitCmd)
					),
					default => sprintf(
						'git -C "%1$s" %2$s 2>&1',
						Nether\Atlantis\Util::Repath("{$Dir}"),
						$GitCmd
					)
				};

				$Result = $this->ExecuteCommandLine($Git);

				if(count($Result->Output)) {
					$this->PrintLn($this->FormatPrimary("[{$Dir}]"));

					if($Verbose)
					$this->PrintLn($this->FormatSecondary($Git));

					echo PHP_EOL, join(PHP_EOL, $Result->Output);
					echo PHP_EOL, PHP_EOL;
				}
			}

			if($Global)
			break;
		}


		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	ComposerDumpAutoload():
	static {

		// making it so we could load composer up and talk to its api
		// requires adding composer/composer as a composer requirement.
		// double composering your system. that sounds bad and annoying
		// to manage. so we will do it the old fashioned shitty way for
		// now until someone convinces me otherwise.

		$Result = $this->ExecuteCommandLine('composer dump-autoload');

		$this->PrintLn('Composer said:');
		$Result->Print('> ');

		return $this;
	}

	protected function
	GetProjectDirectory():
	string {

		$BinPath = Nether\Atlantis\Util::Repath(dirname(__FILE__));
		$CurPath = Nether\Atlantis\Util::Repath(getcwd());

		// if it looks like we in a project directory assume we are in
		// the project directory.

		if(file_exists(sprintf('%s/composer.lock', $CurPath)))
		if(str_starts_with($BinPath, $CurPath))
		return $CurPath;

		// if we are elsewhere but calling this installed as a vendor
		// binary assume that the project directory is up from that.

		if(str_ends_with($BinPath, 'vendor/netherphp/atlantis/bin'))
		return dirname(__FILE__, 5);

		// else just yolo with the current path again.

		return $CurPath;
	}

}

exit((new AtlantisCLI)->Run());
