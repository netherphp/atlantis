<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;
use Nether\Database;

use Nether\Atlantis\Struct\ProjectJSON;
use Nether\Common\Filesystem;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#[Console\Meta\Application('ProjectTool', '5.0.0-dev')]
#[Common\Meta\Info('Handles configuration and setup for project development.')]
class ProjectTool
extends Atlantis\TerminalApp {

	////////////////////////////////////////////////////////////////
	// OVERRIDES Console\Client ////////////////////////////////////

	#[Common\Meta\Date('2023-11-14')]
	protected function
	ApplyDefaultSort():
	void {

		$this->Commands = (
			Common\Datastore::FromArray(array_flip([
				'init', 'setup'
			]))
			->RemapKeyValue(fn(string $K)=> $this->Commands->Get($K))
			->EachKeyValue(fn(string $K)=> $this->Commands->Remove($K))
			->MergeRight($this->Commands)
		);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('init')]
	#[Console\Meta\Info('Begin setting up the project from scratch.')]
	public function
	HandleInit():
	int {

		// git clone git@github.com:netherphp/project .
		// composer require netherphp/atlantis dev-master

		// dev.atl init
		// ssl.atl setup

		// things best only done once.

		$this->HandleProjectDist();
		$this->HandleProjectGitIgnore();

		// things that are safer to repeat technically.

		$this->HandleSetup();

		return 0;
	}

	#[Console\Meta\Command('setup')]
	#[Console\Meta\Info('Reconfigure anything that can be reconfigured easily.')]
	#[Console\Meta\Toggle('--fix', 'Try to forcefully fix things considered errors.')]
	public function
	HandleSetup():
	int {

		$this->HandleProjectPaths();

		return 0;
	}

	#[Common\Meta\Date('2023-11-11')]
	#[Console\Meta\Command('paths', TRUE)]
	#[Console\Meta\Toggle('--fix', 'Try to forcefully fix things considered errors.')]
	public function
	HandleProjectPaths():
	int {

		$this->PrintAppHeader('Setup Project Dirs');

		$Confs = ProjectJSON::FromApp($this->App);
		$OptFix = $this->GetOption('fix') ?? FALSE;

		// first set up all the directories so that mounting points exist
		// for any symlinks later.

		($Confs)
		->Distill(fn(ProjectJSON $P)=> $P->Dirs->Count())
		->EachKeyValue(
			function(string $K, ProjectJSON $P)
			use($OptFix) {
				$this->PrintH2("Dirs: {$K} ({$P->Filename})");
				$this->SetupProjectDirs($P, $OptFix);
				return;
			}
		);

		// then set up project symlinks.

		($Confs)
		->Distill(fn(ProjectJSON $P)=> $P->Symlinks->Count())
		->EachKeyValue(
			function(string $K, ProjectJSON $P)
			use($OptFix) {
				$this->PrintH2("{$K} Symlinks ({$P->Filename})");
				$this->SetupProjectLinks($P, $OptFix);
				return;
			}
		);

		// reinforce project chmods

		($Confs)
		->Distill(fn(ProjectJSON $P)=> $P->Symlinks->Count())
		->EachKeyValue(
			function(string $K, ProjectJSON $P)
			use($OptFix) {
				$this->PrintH2("{$K} Permissions ({$P->Filename})");
				$this->SetupProjectPerms($P, $OptFix);
				return;
			}
		);

		////////

		return 0;
	}

	#[Common\Meta\Date('2023-11-11')]
	#[Console\Meta\Command('dist', TRUE)]
	public function
	HandleProjectDist():
	int {

		$Overwrite = $this->GetOption('y');

		$AppRoot = $this->App->FromProjectRoot();
		$DistRoot = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'vendor', 'netherphp', 'atlantis'
		));

		////////

		$this->PrintLn($this->FormatHeaderPoint(
			'Setup Atlantis Structure...',
			Console\Theme::Accent
		), 2);

		Common\Datastore::FromArray([
			Common\Filesystem\Util::Pathify($AppRoot, 'conf', 'env', 'dev'),
			Common\Filesystem\Util::Pathify($AppRoot, 'core', 'Local'),
			Common\Filesystem\Util::Pathify($AppRoot, 'data'),
			Common\Filesystem\Util::Pathify($AppRoot, 'logs'),
			Common\Filesystem\Util::Pathify($AppRoot, 'temp'),
			Common\Filesystem\Util::Pathify($AppRoot, 'www')
		])
		->Each(function(string $Dir) {
			$this->PrintLn(sprintf('[%s] %s',
				$this->Format('DIR', static::FmtAccent),
				$Dir
			));

			Common\Filesystem\Util::MkDir($Dir);
			return;
		});

		$this->PrintLn();

		////////

		$Todo = Common\Datastore::FromArray([
			Common\Filesystem\Util::Pathify('app', 'conf')
			=> 'conf',

			Common\Filesystem\Util::Pathify('app', 'routes')
			=> 'routes',

			Common\Filesystem\Util::Pathify('app', 'atlantis.json')
			=> Common\Filesystem\Util::Pathify('atlantis.json'),

			Common\Filesystem\Util::Pathify('app', 'composer.json')
			=> Common\Filesystem\Util::Pathify('composer.json'),

			Common\Filesystem\Util::Pathify('app', 'www', 'index.php')
			=> Common\Filesystem\Util::Pathify('www', 'index.php')
		]);

		$Todo->Each(function(string $Dst, string $Src) use($DistRoot, $AppRoot, $Overwrite) {

			$Copy = Atlantis\Util::CopyWithConfirm(
				Common\Filesystem\Util::Pathify($DistRoot, $Src),
				Common\Filesystem\Util::Pathify($AppRoot, $Dst)
			);

			$Cur = NULL;

			foreach($Copy as $Cur) {
				if(is_string($Cur)) {
					if($Overwrite) {
						$Copy->Send(FALSE);
						continue;
					}

					$Copy->Send(!$this->PromptTrue(
						$this->Format("Overwrite {$Cur}?", Console\Theme::Accent),
						'[N/y]'
					));

					continue;
				}
			}

			return;
		});

		return 0;
	}

	#[Common\Meta\Date('2023-11-11')]
	#[Console\Meta\Command('gitignore', TRUE)]
	#[Console\Meta\Info('Add things this framework knows you need to .gitignore')]
	#[Console\Meta\Error(1, 'file write error: %s')]
	public function
	HandleProjectGitIgnore():
	int {

		$this->PrintLn($this->FormatHeaderLine(
			sprintf('%s: Git Ignore Config', $this->AppInfo->Name)
		), 2);

		$Things = Common\Datastore::FromArray([
			'Local Dev Things' => Common\Datastore::FromArray([
				'PHPUnit'                     => '/.phpunit.cache',
				'Composer'                    => '/vendor',
				'Local Environment Lock File' => '/env.lock',
				'Local Backup Dir'            => '/backups',
				'Local Log Dir'               => '/logs',
				'Local Temporary Thrash Dir'  => '/temp'
			]),

			'Local Web Things' => Common\Datastore::FromArray([
				'AcmePHP Server Validation'  => '/www/.well-known',
				'Atlantis App Scripts'       => '/www/share/atlantis',
				'Atlantis NUI Scripts'       => '/www/share/nui',
				'Atlantis Default Theme'     => '/www/themes/default',
				'Atlantis Coming Soon Theme' => '/www/themes/soon'
			]),

			'Framework Managed Things' => Common\Datastore::FromArray([
				'Nether Blog Uploads'              => '/data/blog',
				'Nether Blog Uploads (Symlink)'    => '/www/data/blog',
				'Atlantis QR Codes'                => '/data/qr',
				'Atlantis QR Codes (Symlink)'      => '/www/data/qr',
				'Atlantis File Uploads'            => '/data/upl',
				'Atlantis File Uploads (Symlink)'  => '/www/data/upl',
				'Atlantis VideoTP Cache'           => '/data/vid',
				'Atlantis VideoTP Cache (Symlink)' => '/www/data/vid'
			])
		]);

		$File = $this->App->FromProjectRoot('.gitignore');
		$Ignore = new Atlantis\Util\GitIgnoreTool($File);

		$Things->Each(function(Common\Datastore $Group, string $Key) use($Ignore) {
			$this->PrintLn($this->FormatHeaderPoint($Key, Console\Theme::Accent), 2);
			$this->PrintLn($this->FormatBulletList($Group), 2);
			$Ignore->Append($Group->Values(TRUE));
			return;
		});

		try { $Ignore->Write(); }
		catch(Exception $Err) {
			$this->PrintLn($this->FormatHeaderPoint(
				"ERROR: {$Err->GetMessage()}",
				Console\Theme::Error
			), 2);

			$this->Quit(1, $Err->GetMessage());
		}

		$this->PrintLn($this->FormatHeaderPoint('OK', Console\Theme::OK), 2);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-21')]
	#[Console\Meta\Command('dirs')]
	#[Console\Meta\Info('Lists and Edit the directories managed by the Project JSON.')]
	#[Console\Meta\Value('--path', 'The path to manage.')]
	#[Console\Meta\Toggle('--add', 'Add the specified --path.')]
	#[Console\Meta\Toggle('--del', 'Delete the specified --path.')]
	#[Console\Meta\Error(1, 'no --path specified')]
	#[Console\Meta\Error(2, 'update error: %s')]
	public function
	HandleProjectDirs():
	int {

		$this->PrintAppHeader('Manage Project Directories');

		$this->PrintLn(sprintf(
			'Run %s to check and enforce the configuration.',
			$this->Format('setup', Console\Theme::Prime)
		), 2);

		$this->PrintLn(sprintf(
			'%s = Exists, %s = Missing',
			$this->Theme->GetCharCircleFilled(),
			$this->Theme->GetCharCircleEmpty()
		), 2);

		$OptPath = $this->GetOption('path');
		$OptConf = $this->GetOption('conf');
		$OptAdd = $this->GetOption('add') ?: FALSE;
		$OptDel = $this->GetOption('del') ?: FALSE;

		$Confs = NULL;
		$Err = NULL;

		////////

		if(($OptAdd || $OptDel) && !$OptPath)
		$this->Quit(1);

		try { match(TRUE) {
			$OptAdd
			=> $this->HandleProjectDirsAdd($OptPath, $OptConf),

			$OptDel
			=> $this->HandleProjectDirsDel($OptPath),

			default
			=> NULL
		}; }

		catch(Exception $Err) {
			$this->Quit(2, $Err->GetMessage());
		}

		////////

		$Confs = Atlantis\Struct\ProjectJSON::FromApp($this->App);

		$Confs
		->Filter(fn(Atlantis\Struct\ProjectJSON $P)=> $P->Dirs->Count())
		->Each(function(Atlantis\Struct\ProjectJSON $P, string $K) {
			$this->PrintH3("From {$K} ({$P->Filename})");

			$P->Dirs->Each(function(Common\Filesystem\Directory $D) {

				$Exists = $D->Exists();
				$Bullet = match($Exists) {
					TRUE
					=> $this->Theme->GetCharCircleFilled(),

					default
					=> $this->Theme->GetCharCircleEmpty()
				};

				$this->PrintLn("{$Bullet} {$D->Path}");

				return;
			});

			$this->PrintLn();
			return;
		});

		////////

		return 0;
	}

	protected function
	HandleProjectDirsAdd(string $Path, ?string $Conf=NULL):
	void {

		$Project = $this->QuerySelectProjectConfig(
			fn(ProjectJSON $P, string $K)
			=> $Conf !== NULL ? $Conf === $K : TRUE
		);

		if(!$Project)
		throw new Common\Error\RequiredDataMissing('Project', 'ProjectJSON');

		////////

		$Directory = Filesystem\Directory::FromPath($Path);

		($Project->Dirs)
		->Filter($Directory->IsNot(...))
		->Push($Directory)
		->Sort(Filesystem\Directory::ForSortingByPath(...));

		$this->WriteProjectConfig($Project);

		return;
	}

	protected function
	HandleProjectDirsDel(string $Path):
	void {

		$Confs = ProjectJSON::FromApp($this->App);
		$Counts = $Confs->Map(fn(ProjectJSON $P)=> $P->Dirs->Count());

		////////

		$Confs
		->Each(function(ProjectJSON $P) use($Path) {

			// strip it out if it exists.

			$P->Dirs->Filter(
				fn(Filesystem\Directory $D)
				=> $D->IsNot($Path)
			);

			return;
		})
		->Each(function(ProjectJSON $P, string $K) use($Counts) {

			// rewrite the config file if it changed.

			if($Counts[$K] !== $P->Dirs->Count())
			$this->WriteProjectConfig($P);

			return;
		});

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-21')]
	#[Console\Meta\Command('symlinks')]
	#[Console\Meta\Info('Lists and Edit the Symlinks managed by the Project JSON.')]
	#[Console\Meta\Value('--path', 'The path to manage.')]
	#[Console\Meta\Value('--source', 'The source to point at.')]
	#[Console\Meta\Toggle('--add', 'Add the specified --path.')]
	#[Console\Meta\Toggle('--del', 'Delete the specified --path.')]
	#[Console\Meta\Error(1, 'no --path specified')]
	#[Console\Meta\Error(2, 'no --source specified')]
	#[Console\Meta\Error(3, 'update error: %s')]
	public function
	HandleProjectSymlinks():
	int {

		$this->PrintAppHeader('Manage Project Symlinks');

		$this->PrintLn(sprintf(
			'Run %s to check and enforce the configuration.',
			$this->Format('setup', Console\Theme::Prime)
		), 2);

		$this->PrintLn(sprintf(
			'%s = Exists, %s = Missing',
			$this->Theme->GetCharCircleFilled(),
			$this->Theme->GetCharCircleEmpty()
		), 2);

		$OptPath = $this->GetOption('path');
		$OptSource = $this->GetOption('source');
		$OptConf = $this->GetOption('conf');
		$OptAdd = $this->GetOption('add') ?: FALSE;
		$OptDel = $this->GetOption('del') ?: FALSE;

		$Confs = NULL;
		$Err = NULL;

		////////

		if($OptAdd) {
			if(!$OptPath)
			$this->Quit(1);

			if(!$OptSource)
			$this->Quit(2);
		}

		if($OptDel) {
			if(!$OptPath)
			$this->Quit(1);
		}

		try { match(TRUE) {
			$OptAdd
			=> $this->HandleProjectSymlinksAdd($OptPath, $OptSource, $OptConf),

			$OptDel
			=> $this->HandleProjectSymlinksDel($OptPath),

			default
			=> NULL
		}; }

		catch(Exception $Err) {
			$this->Quit(3, $Err->GetMessage());
		}

		////////

		$Confs = Atlantis\Struct\ProjectJSON::FromApp($this->App);

		$Confs
		->Filter(fn(Atlantis\Struct\ProjectJSON $P)=> $P->Symlinks->Count())
		->Each(function(Atlantis\Struct\ProjectJSON $P, string $K) {
			$this->PrintH3("From {$K} ({$P->Filename})");

			$P->Symlinks->Each(function(Common\Filesystem\Symlink $D) {

				$Exists = $D->Exists();
				$Valid = $D->Valid();

				$Bullet1 = match($Exists) {
					TRUE
					=> $this->Theme->GetCharCircleFilled(),

					default
					=> $this->Theme->GetCharCircleEmpty()
				};

				$Bullet2 = match($Valid) {
					TRUE
					=> $this->Theme->GetCharCircleFilled(),

					default
					=> $this->Theme->GetCharCircleEmpty()
				};

				$this->PrintLn("{$Bullet1} {$D->Path}");
				$this->PrintLn($this->Format(
					"{$Bullet2} {$D->Source}",
					Console\Theme::Muted
				), 2);

				return;
			});

			return;
		});

		////////

		return 0;
	}

	protected function
	HandleProjectSymlinksAdd(string $Path, string $Source, ?string $Conf=NULL):
	void {

		$Project = $this->QuerySelectProjectConfig(
			fn(ProjectJSON $P, string $K)
			=> $Conf !== NULL ? $Conf === $K : TRUE
		);

		if(!$Project)
		throw new Common\Error\RequiredDataMissing('Project', 'ProjectJSON');

		////////

		$Link = Filesystem\Symlink::FromPathSource($Path, $Source);

		($Project->Symlinks)
		->Filter($Link->IsNot(...))
		->Push($Link)
		->Sort(Filesystem\Symlink::ForSortingByPath(...));

		$this->WriteProjectConfig($Project);

		return;
	}

	protected function
	HandleProjectSymlinksDel(string $Path):
	void {

		$Confs = ProjectJSON::FromApp($this->App);
		$Counts = $Confs->Map(fn(ProjectJSON $P)=> $P->Symlinks->Count());

		////////

		$Confs
		->Each(function(ProjectJSON $P) use($Path) {

			// strip it out if it exists.

			$P->Symlinks->Filter(
				fn(Filesystem\Symlink $D)
				=> $D->IsNot($Path)
			);

			return;
		})
		->Each(function(ProjectJSON $P, string $K) use($Counts) {

			// rewrite the config file if it changed.

			if($Counts[$K] !== $P->Symlinks->Count())
			$this->WriteProjectConfig($P);

			return;
		});

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('perms')]
	#[Console\Meta\Toggle('--add', 'Add the specified path+mode to the config.')]
	#[Console\Meta\Toggle('--del', 'Remove the specified path from the config.')]
	#[Console\Meta\Value('--path', 'The path to manage.')]
	#[Console\Meta\Value('--mode', 'The mode to chmod the path.')]
	#[Common\Meta\Date('2024-07-10')]
	public function
	HandleProjectPerms():
	int {

		$this->PrintAppHeader('Setup Project Permissions');

		$OptFix = $this->GetOption('fix') ?? FALSE;
		$OptAdd = $this->GetOption('add') ?? NULL;
		$OptDel = $this->GetOption('del') ?? NULL;

		////////

		if($OptAdd !== NULL) {
			$this->HandleProjectPermsAdd();
			return 0;
		}

		if($OptDel !== NULL) {
			$this->HandleProjectPermsDel();
			return 0;
		}

		////////

		(ProjectJSON::FromApp($this->App))
		->Distill(fn(ProjectJSON $P)=> $P->Perms->Count())
		->EachKeyValue(
			function(string $K, ProjectJSON $P)
			use($OptFix) {
				$this->PrintH2("{$K} ({$P->Filename})");
				$this->SetupProjectPerms($P, $OptFix);
				return;
			}
		);

		////////

		return 0;
	}

	protected function
	HandleProjectPermsAdd():
	bool {

		$Project = $this->QuerySelectProjectConfig();
		$OptPath = $this->GetOption('path') ?? NULL;
		$OptMode = $this->GetOption('mode') ?? NULL;
		$OptComm = $this->GetOption('comment') ?? NULL;

		////////

		if(!$Project)
		return FALSE;

		if(!file_exists($OptPath)) {
			$this->PrintError("Not Found: {$OptPath}");
			return FALSE;
		}

		if(!str_starts_with('0o', $OptMode))
		$OptMode = "0o{$OptMode}";

		////////

		// delete the old one if it exists.

		$Project->Perms->Filter(
			fn(Atlantis\Struct\ProjectJSON\PermJSON\PathModeJSON $P)
			=> $P->Path !== $OptPath
		);

		// append the new one.

		$Project->Perms->Push(new Atlantis\Struct\ProjectJSON\PermJSON\PathModeJSON([
			'Path'    => $OptPath,
			'Mode'    => $OptMode,
			'Comment' => $OptComm
		]));

		////////

		$this->WriteProjectConfig($Project);

		return TRUE;
	}

	protected function
	HandleProjectPermsDel():
	bool {

		return TRUE;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('db')]
	#[Console\Meta\Info('Manage the project database connection info.')]
	#[Console\Meta\Value('--info', 'Specify the connection name to display the connection info.')]
	#[Console\Meta\Value('--json', 'Specify the connection name to print the connection as JSON.')]
	#[Console\Meta\Value('--set', 'Specify the connection name to add or update. ["Default"]')]
	#[Console\Meta\Value('--del', 'Specify the connection name to delete from the config.')]
	#[Console\Meta\Value('--host', 'Hostname of the DB Server.')]
	#[Console\Meta\Value('--db', 'Name of the Database to open.')]
	#[Console\Meta\Value('--user', 'Database auth username.')]
	#[Console\Meta\Value('--pass', 'Database auth password.')]
	public function
	HandleDatabase():
	int {

		$Env = $this->GetOption('env') ?? $this->App->GetProjectEnv();

		$Project = Atlantis\Struct\ProjectJSON::FromFile(
			$this->App->FromConfEnv('atlantis.json', $Env)
		);

		$List = $Project->DB->GetConnections();
		$Item = NULL;

		////////

		$this->HandleDatabaseTrySet($Project);
		$this->HandleDatabaseTryDel($Project);
		$this->HandleDatabaseTryPrint($Project, 'json');
		$this->HandleDatabaseTryPrint($Project, 'info');

		////////

		$this->PrintH2("Databases: {$Project->Filename}");

		foreach($List as $Item) {
			$this->PrintLn(sprintf(
				' * %s (%s)',
				$Item->Name,
				$this->Format($Item->Type, Console\Theme::Muted)
			));
		}

		$this->PrintLn();

		return 0;
	}

	protected function
	HandleDatabaseTrySet(Atlantis\Struct\ProjectJSON $Project):
	void {

		// handle creating new databases or updating values for already
		// existing ones.

		$List = $Project->DB->GetConnections();

		$Name = $this->GetOption('set');
		$Type = $this->GetOption('type');
		$Host = $this->GetOption('host');
		$Data = $this->GetOption('db');
		$User = $this->GetOption('user');
		$Pass = $this->GetOption('pass');
		$Conf = NULL;

		////////

		if(!$Name)
		return;

		if($Name === TRUE)
		$Name = 'Default';

		////////

		if($List->HasKey($Name))
		$Conf = $List[$Name];

		else
		$Conf = new Database\Connection(
			'type', 'host',
			'db', 'user', 'pass'
		);

		$Conf->Name = $Name;
		if($Type !== NULL) $Conf->Type = $Type;
		if($Host !== NULL) $Conf->Hostname = $Host;
		if($Data !== NULL) $Conf->Database = $Data;
		if($User !== NULL) $Conf->Username = $User;
		if($Pass !== NULL) $Conf->Password = $Pass;

		////////

		$this->PrintStatus(sprintf(
			'Updating connection "%s"...',
			$Conf->Name
		));

		$this->PrintBulletList($Conf->ToArray());

		////////

		$Project->DB->SetConnection($Conf);
		$Project->Write();
		$this->Quit(0);

		return;
	}

	protected function
	HandleDatabaseTryDel(Atlantis\Struct\ProjectJSON $Project):
	void {

		$List = $Project->DB->GetConnections();
		$Name = $this->GetOption('del');

		////////

		if($Name === NULL)
		return;

		if(!is_string($Name) || !$Name)
		$this->Quit(3);

		////////

		if($List->HasKey($Name)) {
			$this->PrintStatus(sprintf(
				'Removing connection "%s"...',
				$Name
			));

			$Project->DB->DeleteConnection($Name);
			$Project->Write();

			$this->Quit(0);
		}

		return;
	}

	protected function
	HandleDatabaseTryPrint(Atlantis\Struct\ProjectJSON $Project, string $Format):
	void {

		$List = $Project->DB->GetConnections();
		$Name = $this->GetOption($Format);

		////////

		if($Name === NULL)
		return;

		if(!is_string($Name) || !$Name)
		$this->Quit(3);

		////////

		switch($Format) {
			case 'json': {
				$this->PrintLn(json_encode($List[$Name]->ToArray()));
				break;
			}

			default: {
				$this->PrintBulletList($List[$Name]->ToArray());
				break;
			}
		}

		$this->Quit(0);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-11')]
	public function
	SetupProjectDirs(ProjectJSON $Project, bool $OptFix=FALSE):
	static {

		$Report = new Common\Datastore;

		$Printer = function(string $V, string $K) {
			$Label = 'DIR';

			if($V === 'OK' || $V === 'NEW' || $V === 'FIXED') {
				$this->PrintLn(sprintf(
					'[%s] %s',
					$this->Format($Label, Console\Theme::OK),
					$K, $V
				));

				return;
			}

			$this->PrintLn(sprintf(
				'[%s] %s (%s)',
				$this->Format($Label, Console\Theme::Error),
				$K, $V
			));

			return;
		};

		$Tester = function(Common\Filesystem\Directory $Dir) use($Report) {

			if(is_dir($Dir->Path)) {
				$Report[$Dir->Path] = 'OK';
				return;
			}

			if(is_file($Dir->Path)) {
				$Report[$Dir->Path] = 'ERROR: Exists as File';
				return;
			}

			Common\Filesystem\Util::MkDir($Dir->Path);

			if(!is_dir($Dir->Path)) {
				$Report[$Dir->Path] = "ERROR: Permission Denied";
				return;
			}

			$Report[$Dir->Path] = 'NEW';

			return;
		};

		$Fixer = function(Common\Filesystem\Directory $Dir) use($Report) {

			if(is_file($Dir->Path)) {
				unlink($Dir->Path);
				Common\Filesystem\Util::MkDir($Dir->Path);

				if(is_dir($Dir->Path)) {
					$Report[$Dir->Path] = 'FIXED';
				}

				return;
			}

			return;
		};

		////////

		$Project->Dirs->Each($Tester);
		$Report->Each($Printer);
		$this->PrintLn();

		////////

		$Retry = $Project->Dirs->Distill(
			fn(Common\Filesystem\Directory $D)
			=> str_starts_with($Report[$D->Path], 'ERROR:')
		);

		if($Retry->Count() === 0)
		$this->PrintOK();

		else
		$this->PrintError("ERROR: Needs fixed: {$Retry->Count()}");

		if($Retry->Count() && $OptFix) {
			$Report->Clear();
			$Retry->Each($Fixer);
			$Report->Each($Printer);
			$this->PrintLn();
		}

		////////

		return $this;
	}

	#[Common\Meta\Date('2023-11-11')]
	public function
	SetupProjectLinks(ProjectJSON $Project, bool $OptFix=FALSE):
	static {

		$Report = new Common\Datastore;

		$Printer = function(string $V, string $K) {
			$Label = 'SYM';

			if(!str_starts_with($V, 'ERR')) {
				$this->PrintLn(sprintf(
					'[%s] %s %s',
					$this->Format($Label, Console\Theme::OK),
					$K, $this->Format("({$V})", Console\Theme::Muted)
				));

				return;
			}

			$this->PrintLn(sprintf(
				'[%s] %s (%s)',
				$this->Format($Label, Console\Theme::Error),
				$K, $V
			));

			return;
		};

		$Tester = function(Common\Filesystem\Symlink $Dir) use($Report) {

			if(is_file($Dir->Path)) {
				if(is_link($Dir->Path)) {
					if(Common\Filesystem\Util::IsLinkTo($Dir->Path, realpath($Dir->Source))) {
						$Report[$Dir->Path] = $Dir->Source;
						return;
					}

					$Report[$Dir->Path] = 'ERROR: Exists as a symlink pointing to wrong thing.';
					return;
				}

				$Report[$Dir->Path] = 'ERROR: Exists as File';
				return;
			}

			if(is_dir($Dir->Path)) {
				if(is_link($Dir->Path)) {
					if(Common\Filesystem\Util::IsLinkTo($Dir->Path, realpath($Dir->Source))) {
						$Report[$Dir->Path] = $Dir->Source;
						return;
					}

					else {
						$Report[$Dir->Path] = sprintf('ERROR: Exists link to %s', realpath($Dir->Source));
						return;
					}
				}

				$Report[$Dir->Path] = 'ERROR: Exists as Directory';
				return;
			}

			if(Common\Filesystem\Util::IsLinkTo($Dir->Path, realpath($Dir->Source))) {
				$Report[$Dir->Path] = $Dir->Source;
				return;
			}

			if(!file_exists($Dir->Source)) {
				$Report[$Dir->Path] = "ERROR: Source Missing";
				return;
			}

			symlink(realpath($Dir->Source), $Dir->Path);

			if(!is_link($Dir->Path)) {
				$Report[$Dir->Path] = "ERROR: Permission Denied";
				return;
			}

			$Report[$Dir->Path] = $Dir->Source;
			return;
		};

		$Fixer = function(Common\Filesystem\Symlink $Dir) use($Report) {

			if(is_link($Dir->Path) || is_file($Dir->Path)) {
				unlink($Dir->Path);
				symlink(realpath($Dir->Source), $Dir->Path);

				if(Common\Filesystem\Util::IsLinkTo($Dir->Path, realpath($Dir->Source))) {
					$Report[$Dir->Path] = 'FIXED';
					return;
				}

				$Report[$Dir->Path] = 'ERROR: Fixing failed.';
				return;
			}

			if(is_dir($Dir->Path)) {
				Common\Filesystem\Util::RmDir($Dir->Path);
				symlink(realpath($Dir->Source), $Dir->Path);

				if(Common\Filesystem\Util::IsLinkTo($Dir->Path, realpath($Dir->Source))) {
					$Report[$Dir->Path] = 'FIXED';
					return;
				}

				$Report[$Dir->Path] = 'ERROR: Fixing failed.';
				return;
			}

			$Report[$Dir->Path] = 'ERROR: No fix available for whatever is wrong.';
			return;
		};

		////////

		$Project->Symlinks->Each($Tester);
		$Report->Each($Printer);
		$this->PrintLn();

		////////

		$Retry = $Project->Symlinks->Distill(
			fn(Common\Filesystem\Symlink $D)=>
			str_starts_with($Report[$D->Path], 'ERROR:')
		);

		if($Retry->Count() === 0)
		$this->PrintOK();

		else
		$this->PrintError("ERROR: Needs fixed: {$Retry->Count()}");

		if($Retry->Count() && $OptFix) {
			$Report->Clear();
			$Retry->Each($Fixer);
			$Report->Each($Printer);
			$this->PrintLn();
		}

		////////

		return $this;
	}

	#[Common\Meta\Date('2024-07-10')]
	public function
	SetupProjectPerms(ProjectJSON $Project, bool $OptFix=FALSE):
	static {

		$Report = new Common\Datastore;

		////////

		foreach($Project->Perms as $P) {
			/** @var ProjectJSON\PermJSON\PathModeJSON $P */

			// handle if the file does not exist.

			if(!file_exists($P->Path)) {
				$Report->Push([ $P, 0, -1, 'Not Found' ]);
				continue;
			}

			// handle if the mode is already correct.

			$Cur = Common\Filesystem\Util::ChmodOctal($P->Path);

			if($Cur === $P->Mode) {
				$Report->Push([ $P, $Cur, 0, 'OK' ]);
				continue;
			}

			// handle updating the mode as well as if the final result
			// did not end up being what was expected.

			Common\Filesystem\Util::Chmod(
				$P->Path,
				$P->GetNumericOctal()
			);

			$Chm = Common\Filesystem\Util::ChmodOctal($P->Path);

			if($Chm !== $P->Mode) {
				$Report->Push([ $P, $Chm, -2, 'Unexpected' ]);
				continue;
			}

			// handle a job well done.

			$Report->Push([ $P, $Cur, 1, 'Changed' ]);

			continue;
		}

		////////

		$ErrCount = $Report->Accumulate(
			Common\Values::Zero,
			fn(int $C, array $R)=> $R[2] < 0 ? $C + 1 : $C
		);

		$Report->EachKeyValue(function(string $K, array $V) {

			list($P, $Org, $Status, $Msg) = $V;
			$Label = 'PRM';

			$Label = match(TRUE) {
				($Status === 0)
				=> $this->Format($Label, $this->Theme::OK),

				($Status === 1)
				=> $this->Format($Label, $this->Theme::OK),

				default
				=> $this->Format($Label, $this->Theme::Error)
			};

			$this->PrintLn(sprintf(
				'[%s] %s (%s: %s => %s)',
				$Label, $P->Path, $Msg, $Org, $P->Mode
			));

			return;
		});

		$this->PrintLn();

		if($ErrCount > 0) {
			$this->PrintError(sprintf(
				'%d %s',
				$ErrCount,
				Common\Values::IfOneElse($ErrCount, 'error', 'errors')
			));

			return $this;
		}

		////////

		$this->PrintOK();

		return $this;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	use
	Atlantis\Packages\DevTool\QuerySelectProjectConfig;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-11')]
	public function
	WriteProjectConfig(ProjectJSON $Project):
	void {

		$this->PrintStatusMuted("Updating {$Project->Filename}...");

		if(!$Project->Write())
		throw new Common\Error\FileWriteError($Project->Filename);

		return;
	}

}

exit(ProjectTool::Realboot([]));
