<?php

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

use
Nether\Atlantis,
Nether\Atlantis\Struct\ProjectJSON,
Nether\Common,
Nether\Console;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#[Console\Meta\Application('CertTool', '5.0.0-dev')]
class CertTool
extends Atlantis\TerminalApp {

	use
	Atlantis\Packages\DevTool\QuerySelectProjectConfig,
	Atlantis\Packages\DevTool\QueryDomainLineList;

	////////////////////////////////////////////////////////////////
	// OVERRIDES Console\Client ////////////////////////////////////

	#[Common\Meta\Date('2023-11-14')]
	protected function
	ApplyDefaultSort():
	void {

		$this->Commands = (
			Common\Datastore::FromArray(array_flip([ 'config', 'renew', 'cron', 'lookup' ]))
			->RemapKeyValue(fn(string $K)=> $this->Commands->Get($K))
			->EachKeyValue(fn(string $K)=> $this->Commands->Remove($K))
			->MergeRight($this->Commands)
		);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-14')]
	#[Console\Meta\Command('config')]
	#[Console\Meta\Info('Tool to configure the SSL cert for this project.')]
	#[Console\Meta\Error(1, 'No atlantis.json file found.')]
	public function
	HandleConfig():
	int {

		$this->PrintLn($this->FormatH1(sprintf(
			'%s: Config',
			$this->AppInfo->Name
		)));

		////////

		$Project = $this->QuerySelectProjectConfig(
			fn(Atlantis\Struct\ProjectJSON $P, string $K)
			=> $K === 'Env'
		);

		if(!$Project)
		$this->Quit(1);

		////////

		$Project->Cert = $this->QueryUserForCertInfo($Project);

		$this->PrintLn($this->FormatH2('Cert Config'));
		$this->PrintLn($this->FormatCertConfig($Project->Cert));

		////////

		try { $this->WriteProjectConfig($Project); }
		catch(Exception $Err) {
			$this->PrintLn($this->FormatHeaderPoint(
				"ERROR: {$Err->GetMessage()}",
				Console\Theme::Error
			), 2);

			$this->Quit(2, $Err->GetMessage());
		}

		$this->PrintLn($this->FormatHeaderPoint('OK', Console\Theme::OK), 2);

		////////

		try { $this->WriteCertConfig($Project); }
		catch(Exception $Err) {
			$this->PrintLn($this->FormatHeaderPoint(
				"ERROR: {$Err->GetMessage()}",
				Console\Theme::Error
			), 2);

			$this->Quit(3, $Err->GetMessage());
		}

		$this->PrintLn($this->FormatHeaderPoint('OK', Console\Theme::OK), 2);

		return 0;
	}

	#[Common\Meta\Date('2023-11-14')]
	#[Console\Meta\Command('renew')]
	#[Console\Meta\Info('Renew the SSL cert for this project.')]
	#[Console\Meta\Error(1, 'no project json selected')]
	public function
	HandleRenew():
	int {

		$this->PrintLn($this->FormatH1(sprintf(
			'%s: Renew',
			$this->AppInfo->Name
		)));

		////////

		$Project = $this->QuerySelectProjectConfig(
			fn(Atlantis\Struct\ProjectJSON $P, string $K)
			=> $K === 'Env'
		);

		if(!$Project)
		$this->Quit(1);

		////////

		if($Project->Cert->Sudo && $this->Sudo())
		return 0;

		////////

		$this->RenewProjectCert($Project);

		return 0;
	}

	#[Common\Meta\Date('2023-11-14')]
	#[Console\Meta\Command('lookup')]
	#[Console\Meta\Info('Check the status of an SSL cert for any domain on the internet.')]
	#[Console\Meta\Arg('domain')]
	#[Console\Meta\Error(1, 'no domain specified')]
	public function
	HandleLookupCert():
	int {

		$Domain = strtoupper($this->GetInput(1));
		$Via = 'openssl';
		$Format = 'cli';
		$Result = NULL;

		////////

		if(!$Domain)
		$this->Quit(1);

		////////

		$this->PrintLn($this->FormatH1(sprintf(
			'%s: Lookup %s',
			$this->AppInfo->Name,
			$Domain
		)));

		if($this->GetOption('json')) {
			if($this->GetOption('pretty'))
			$Format = 'json-pretty';
			else
			$Format = 'json';
		}

		if($this->GetOption('openssl'))
		$Via = 'openssl';

		if($this->GetOption('curl'))
		$Via = 'curl';

		////////

		try {
			$Result = match($Via) {
				'curl'
				=> Atlantis\Util\CertInfo::FetchViaCurl($Domain),

				default
				=> Atlantis\Util\CertInfo::FetchViaOpenSSL($Domain)
			};
		}

		catch(Throwable $Error) { }

		$Output = Common\Datastore::FromArray([
			'Domain'          => $Domain,
			'Status'          => ($Result ? $Result->GetStatusWord() : 'ERROR'),
			'Date'            => ($Result ? (string)($Result->DateStart) : NULL),
			'ExpireDate'      => ($Result ? (string)($Result->DateExpire) : NULL),
			'ExpireTimeframe' => ($Result ? (string)($Result->GetTimeframe()) : NULL),
			'Source'          => ($Result ? (string)($Result->Source) : NULL),
			'Code'            => ($Result ? $Result->GetStatusCode() : -1)
		]);

		////////

		$Output->Filter(fn(mixed $D)=> $D !== NULL);

		if($Format === 'json') {
			$this->PrintLn(json_encode($Output));
			return 0;
		}

		if($Format === 'json-pretty') {
			$this->PrintLn(Common\Text::ReadableJSON($Output));
			return 0;
		}

		////////

		$Codes = [
			-1 => Console\Theme::Error,
			0  => Console\Theme::Error,
			1  => Console\Theme::OK,
			2  => Console\Theme::Warning,
			3  => Console\Theme::Alert
		];

		if(isset($Codes[$Output['Code']])) {
			$Output['Domain'] = $this->Format($Output['Domain'], $Codes[$Output['Code']]);
			$Output['Status'] = $this->Format($Output['Status'], $Codes[$Output['Code']]);
		}

		$this->PrintLn($this->FormatBulletList($Output), 2);

		return 0;
	}

	#[Common\Meta\Date('2023-11-14')]
	#[Console\Meta\Command('cron')]
	#[Console\Meta\Info('Shows the line to be added to crontab to auto-renew SSL.')]
	public function
	HandleCron():
	int {

		$this->PrintLn($this->FormatH1(sprintf(
			'%s: Renew via Crontab',
			$this->AppInfo->Name
		)));

		$Crontab = Common\Struct\CrontabFile::FetchViaSystemUser();
		$Time = $this->GetOption('time') ?? '0420';
		$Command = $this->GenerateCommandRenewCert();

		////////

		$Row = new Common\Struct\CrontabEntry;
		$Row->SetCommand($Command);
		$Row->SetupDailyTime($Time);

		////////

		$this->PrintLn($this->FormatTopicList([
			'Crontab Line:' => $Row->GetAsCrontab(),
			'Runs At:'      => sprintf('%s (in %s)', $Row->GetTimerAsWords(), $Row->GetTimerAsTimeframe())
		]), 2);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	public function
	FormatCertConfig(ProjectJSON\CertJSON $Cert):
	string {

		$Data = new Common\Datastore($Cert->ToArray());

		$Data->Remap(function(mixed $D) {
			if(is_array($D) || is_object($D))
			return json_encode($D);

			return (string)$D;
		});

		return sprintf('%s%s', $this->FormatBulletList($Data), PHP_EOL);
	}

	public function
	GenerateCommandRenewCert(int $Version=1):
	string {

		return match($Version) {
			default => sprintf(
				'env php %s renew',
				Common\Filesystem\Util::Pathify(
					$this->App->GetProjectRoot(),
					'vendor', 'bin', 'ssl.atl'
				)
			)
		};
	}

	#[Common\Meta\Date('2023-11-14')]
	public function
	RenewProjectCert(Atlantis\Struct\ProjectJSON $Project):
	bool {

		if($Project->Cert->Type === ($Project->Cert)::TypeAcmePHP)
		return $this->RenewProjectCertAcmePHP($Project);

		return FALSE;
	}

	#[Common\Meta\Date('2023-11-14')]
	protected function
	RenewProjectCertAcmePHP(Atlantis\Struct\ProjectJSON $Project):
	bool {

		$AcmeConf = $this->App->GetEnvConfigRoot('acmephp.yml');
		$AcmeBin = '/opt/ssl/acmephp.phar';

		$Command = NULL;
		$Result = NULL;

		////////

		if(!file_exists($AcmeConf))
		throw new Common\Error\FileNotFound($AcmeConf);

		////////

		$Command = sprintf('%s run %s 2>&1', $AcmeBin, $AcmeConf);
		$Result = $this->ExecuteCommandLine($Command, TRUE);

		$this->PrintLn($this->FormatHeaderLine(
			'Run AcmePHP', Console\Theme::Accent
		), 2);

		$this->PrintLn($Command, 2);

		if($Result->Error) {
			$this->PrintLn($this->FormatHeaderPoint(
				'ERROR', Console\Theme::Error
			), 2);

			$this->PrintLn($this->Format(
				$Result->GetOutputString(),
				Console\Theme::Error
			), 2);

			return FALSE;
		}

		$this->PrintLn($this->FormatHeaderPoint(
			'OK', Console\Theme::OK
		), 2);

		return TRUE;
	}

	#[Common\Meta\Date('2023-10-12')]
	protected function
	QueryUserForCertInfo(ProjectJSON $Project):
	ProjectJSON\CertJSON {

		$Cert = new ProjectJSON\CertJSON($Project->Cert->ToArray());

		////////

		$Cert->Type = 'acmephp';

		$Cert->Domains = $this->QueryDomainLineList(
			$Cert->Domains
		);

		////////

		$Cert->OrgName = $this->PromptForValue(
			'Company/Org Name',
			'string', TRUE,
			Default: $Project->Cert->OrgName
		);

		$Cert->OrgCountry = $this->PromptForValue(
			'Company/Org Country',
			'string, UNLOCODE preferred', TRUE,
			Default: $Project->Cert->OrgCountry
		);

		$Cert->OrgCity = $this->PromptForValue(
			'Company/Org City',
			'string, UNLOCODE preferred', TRUE,
			Default: $Project->Cert->OrgCity
		);

		////////

		$Cert->TechEmail = $this->PromptForValue(
			'Tech Contact Email',
			'string', TRUE,
			Common\Filters\Text::Email(...),
			Default: $Project->Cert->TechEmail
		);

		////////

		return $Cert;
	}

	#[Common\Meta\Date('2023-11-14')]
	public function
	WriteProjectConfig(Atlantis\Struct\ProjectJSON $Project):
	void {

		$this->PrintLn($this->FormatHeaderPoint(
			"Updating {$Project->Filename}...",
			Console\Theme::Accent
		), 2);

		if(!$Project->Write())
		throw new Common\Error\FileWriteError($Project->Filename);

		return;
	}

	#[Common\Meta\Date('2023-11-10')]
	public function
	WriteCertConfig(Atlantis\Struct\ProjectJSON $Project):
	void {

		$Filename = NULL;
		$Contents = NULL;

		if($Project->Cert->Type === 'acmephp') {
			$Filename = 'acmephp.yml';
			$Contents = $Project->Cert->ToAcmeYaml($this->App);
		}

		////////

		$Filename = $this->App->FromConfEnv($Filename);

		$this->PrintLn($this->FormatHeaderPoint(
			"Updating {$Filename}...",
			Console\Theme::Accent
		), 2);

		////////

		if(file_exists($Filename) && !is_writable($Filename))
		throw new Common\Error\FileUnwritable($Filename);

		elseif(!is_writable(dirname($Filename)))
		throw new Common\Error\DirUnwritable($Filename);

		////////

		$Bytes = file_put_contents($Filename, $Contents);

		if($Bytes === FALSE)
		throw new Common\Error\FileWriteError($Filename);

		return;
	}

}

exit(CertTool::Realboot());
