<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

class CrontabTool
extends Console\Client {

	const
	AppName    = 'Atlantis Crontab Tool',
	AppVersion = '5.0.0-dev',
	AppDebug   = TRUE;

	protected Atlantis\Engine
	$App;

	////////////////////////////////////////////////////////////////
	// OVERRIDES Console\Client ////////////////////////////////////

	protected function
	OnReady():
	void {

		$this->App = new Atlantis\Engine(
			Atlantis\Util::GetBinProjectDirectory(__FILE__)
		);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('list')]
	#[Console\Meta\Info('Show all the things currently in the Crontab.')]
	#[Console\Meta\Value('--sort', 'none, next, or cmd')]
	public function
	ListCrontabEntries():
	int {

		$Sort = $this->GetOption('sort') ?? 'none';
		$File = Common\Struct\CrontabFile::FetchViaSystemUser();
		$Now = Common\Date::FromDateString('now');
		$HasAtlantisSSL = $this->CheckForAtlantisSSL($File);

		$Line = NULL;

		$File
		->Filter(Common\Struct\CrontabFile::CleanCrontabLine(...))
		->Revalue();

		////////

		switch($Sort) {

			case 'cmd':
				$File->Sort(
					fn(Common\Struct\CrontabEntry $A, Common\Struct\CrontabEntry $B)
					=> $A->Command <=> $B->Command
				);
			break;

			case 'next':
				$File->Sort(
					fn(Common\Struct\CrontabEntry $A, Common\Struct\CrontabEntry $B)
					=> $A->GetTimerAsInt() <=> $B->GetTimerAsInt()
				);
			break;

		}

		////////

		$this
		->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Current Time:'),
			$Now->Get(Common\Values::DateFormatYMDT24VZ)
		))
		->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Crontab Entries:'),
			$File->Count()
		))
		->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Atlantis SSL Entry:'),
			(
				$HasAtlantisSSL
				? 'OK'
				: $this->FormatErrorPrimary('NOT FOUND')
			)
		))
		->PrintLn();

		foreach($File as $Line) {
			/** @var Common\Struct\CrontabEntry $Line */

			$this->PrintLn(sprintf(
				'%s %s %s%s%s',
				$this->FormatPrimary('>'),
				$this->FormatSecondary($Line->GetTimerAsWords()),
				$this->FormatPrimary('('),
				$this->FormatSecondary($Line->GetTimerAsTimeframe()),
				$this->FormatPrimary(')')
			));

			$this
			->PrintLn(sprintf('%s %s', $this->Formatter->Bold('$'), $Line->Command))
			->PrintLn();
		}

		return 0;
	}

	#[Console\Meta\Command('ssl')]
	#[Console\meta\Info('Show you the entry that should be added to CRON to auto-renew SSL.')]
	public function
	GenerateCrontabSSL():
	int {

		$Time = $this->GetOption('time') ?? '0420';
		$ShouldAdd = $this->GetOption('add') ?? FALSE;
		$ShouldRemove = $this->GetOption('remove') ?? FALSE;
		$UseLocalTime = $this->GetOption('local') ?? FALSE;

		$Crontab = Common\Struct\CrontabFile::FetchViaSystemUser();
		$Command = $this->GenerateCommmandForAtlantisSSL();
		$HasAtlantisSSL = $this->CheckForAtlantisSSL($Crontab);
		$Count = NULL;

		$Row = new Common\Struct\CrontabEntry;
		$Row->SetCommand($Command);
		$Row->SetupDailyTime($Time, $UseLocalTime);

		$this
		->PrintLn(sprintf(
			'%s %s',
			$this->FormatPrimary('Crontab:'),
			$Row->GetAsCrontab()
		))
		->PrintLn(sprintf(
			'%s %s (in %s)',
			$this->FormatSecondary('Runs At:'),
			$Row->GetTimerAsWords(),
			$Row->GetTimerAsTimeframe()
		));

		////////

		if($ShouldAdd && $HasAtlantisSSL) {
			$this
			->PrintLn(sprintf(
				'%s %s',
				$this->FormatSecondary('Result:'),
				'Entry for SSL renewals already found in Crontab.'
			))
			->PrintLn();

			return 0;
		}

		if($ShouldAdd && !$HasAtlantisSSL) {
			$Crontab->Push($Row);
			$Crontab->Write();

			////////

			$Crontab = Common\Struct\CrontabFile::FetchViaSystemUser();
			$HasAtlantisSSL = $this->CheckForAtlantisSSL($Crontab);

			if(!$HasAtlantisSSL) {
				$this
				->PrintLn(sprintf(
					'%s %s',
					$this->FormatErrorPrimary('ERROR:'),
					'The entry to add via Crontab did not stick.'
				))
				->PrintLn();

				return 1;
			}

			$this
			->PrintLn(sprintf(
				'%s %s',
				$this->FormatSecondary('Result:'),
				'The entry has been added to Crontab.'
			))
			->PrintLn();
		}

		if($ShouldRemove) {
			$Count = $Crontab->Count();

			$Crontab->Filter(function(?Common\Struct\CrontabEntry $Item) {
				if(!$Item)
				return TRUE;

				if(str_contains($Item->Command, 'atlantis acmephp-run'))
				return FALSE;

				return TRUE;
			});

			$Crontab->Write();

			if($Count === $Crontab->Count()) {
				$this
				->PrintLn(sprintf(
					'%s %s',
					$this->FormatErrorPrimary('ERROR:'),
					'Did not find any entries to remove.'
				))
				->PrintLn();

				return 1;
			}

		}

		////////

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	public function
	GenerateCommmandForAtlantisSSL(int $Version=1):
	string {

		return match($Version) {
			default => sprintf(
				'env php %s renew',
				Common\Filesystem\Util::Pathify(
					$this->App->GetProjectRoot(),
					'vendor', 'bin', 'ssl.atl'
				)
			)
		};
	}

	public function
	CheckForAtlantisSSL(Common\Struct\CrontabFile $File):
	bool {

		$Command = $this->GenerateCommmandForAtlantisSSL();

		$Found = (
			$File
			->Distill(Common\Struct\CrontabFile::CleanCrontabLine(...))
			->Filter(
				fn(Common\Struct\CrontabEntry $Row)
				=> str_starts_with($Row->Command, $Command)
			)
			->Count()
		);

		return $Found !== 0;
	}


}

exit((new CrontabTool)->Run());
