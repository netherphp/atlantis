<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;
use Nether\Storage;
use Nether\User;

use Nether\Atlantis\Struct\AtlantisProjectJSON;
use Nether\Atlantis\Struct\AtlantisProjectWebServer;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#[Console\Meta\Application('Project Dev Tools', '5.0.0-dev')]
#[Common\Meta\Info('Some cheat tools mostly at the Local project level.')]
class DevTool
extends Console\Client {

	protected Atlantis\Engine
	$App;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	OnReady():
	void {

		$this->App = new Atlantis\Engine(
			Atlantis\Util::GetBinProjectDirectory(__FILE__)
		);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('datetime')]
	#[Console\Meta\Info('Show date and time stamp info.')]
	#[Console\Meta\Value('--date', 'A date component to use as input.')]
	#[Console\Meta\Value('--time', 'A time component to use as input.')]
	#[Console\Meta\Value('--tz', 'A timezone component to use as input.')]
	#[Console\Meta\Value('--unix', 'Unix timestamp as an integer to use as input date. Overrides all other input options.')]
	public function
	DateTimeInfo():
	int {

		$Now = new Common\Date;
		$Date = NULL;
		$Key = NULL;
		$Val = NULL;

		$InputUnix = $this->GetOption('unix');
		$InputDate = $this->GetOption('date') ?? $Now->Get(Common\Values::DateFormatYMD);
		$InputTime = $this->GetOption('time') ?? $Now->Get(Common\Values::DateFormatT24V);
		$InputZone = $this->GetOption('tz') ?? $Now->Get(Common\Values::DateFormatTO);

		////////

		if($InputUnix !== NULL)
		$Date = Common\Date::FromTime($InputUnix);
		else
		$Date = Common\Date::FromDateString("{$InputDate} {$InputTime} {$InputZone}");

		////////

		$Info = [
			"Date ({$Date->Get('T')})"
			=> $Date->Get(Common\Values::DateFormatYMDT24VO),

			"Date (UTC)"
			=> $Date->SetTimezone('UTC')->Get(Common\Values::DateFormatYMDT24VO),

			"Time (UTC)"
			=> $Date->GetUnixtime()
		];

		foreach($Info as $Key => $Val) {
			$this->PrintLn(sprintf(
				'%s: %s',
				$this->Format($Key, Bold: TRUE),
				$Val
			));
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('shove')]
	#[Console\Meta\Info('Quick shove the current state into the repository.')]
	#[Console\Meta\Toggle('--dry', 'Just pretend.')]
	public function
	ProjectShoveIntoRepo():
	int {

		$Conf = Atlantis\Struct\AtlantisProjectJSON::FromApp($this->App);
		$Steps = new Common\Datastore($Conf->StepsForShove);
		$OptDry = $this->GetOption('Dry');

		$Steps->Each(function(mixed $Line) use($OptDry) {
			if(!is_string($Line))
			return;

			// execute a command. only show the output if the command
			// resulted in an error code.

			$Cmd = NULL;

			if(str_starts_with($Line, '$$ ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoCommandLine]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine($Cmd);

				if($Result->Error) {
					$this->FormatLn('ERROR', Bold: TRUE);
					$this->PrintLn($Result->GetOutputString());
				}

				return;
			}

			// execute a command and always show the output regardless
			// of the result it had.

			if(str_starts_with($Line, '$! ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoExecuteCommand]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine(substr($Line, 3));
				$this->PrintLn($Result->GetOutputString());

				return;
			}

			return;
		});

		return 0;
	}

	#[Console\Meta\Command('release')]
	#[Console\Meta\Info('Perform all the actions needed to update this project installation.')]
	#[Console\Meta\Toggle('--dry', 'Just pretend.')]
	public function
	ProjectPullToRelease():
	int {

		$Conf = Atlantis\Struct\AtlantisProjectJSON::FromApp($this->App);
		$Steps = new Common\Datastore($Conf->StepsForRelease);
		$OptDry = $this->GetOption('Dry');

		$Steps->Each(function(mixed $Line) use($OptDry) {
			if(!is_string($Line))
			return;

			// execute a command. only show the output if the command
			// resulted in an error code.

			$Cmd = NULL;

			if(str_starts_with($Line, '$$ ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoCommandLine]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine($Cmd);

				if($Result->Error) {
					$this->FormatLn('ERROR', Bold: TRUE);
					$this->PrintLn($Result->GetOutputString());
				}

				return;
			}

			// execute a command and always show the output regardless
			// of the result it had.

			if(str_starts_with($Line, '$! ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoExecuteCommand]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine(substr($Line, 3));
				$this->PrintLn($Result->GetOutputString());

				return;
			}

			return;
		});

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('init')]
	#[Console\Meta\Info('Begin setting up the project from scratch.')]
	public function
	HandleInit():
	int {

		// git clone git@github.com:netherphp/project .
		// composer require netherphp/atlantis dev-master

		// dev.atl init
		// atlantis setup (move the mkdir/link to dev.atl)
		// ssl.atl setup

		$this->HandleSetupAppDist();
		$this->HandleSetupGitIgnore();
		$this->HandleSetup();

		return 0;
	}

	#[Console\Meta\Command('setup')]
	#[Console\Meta\Info('Reconfigure anything that can be reconfigured easily.')]
	public function
	HandleSetup():
	int {

		$this->HandleSetupProjectPaths();
		$this->HandleSetupWebserver();

		return 0;
	}

	#[Console\Meta\Command('setup-project')]
	public function
	HandleSetupProjectPaths():
	int {

		$Project = AtlantisProjectJSON::FromApp($this->App);
		$OptFix = $this->GetOption('fix') ?? FALSE;

		$this->SetupProjectDirs($Project, $OptFix);
		$this->SetupProjectLinks($Project, $OptFix);

		return 0;
	}

	protected function
	SetupProjectDirs(AtlantisProjectJSON $Project, bool $OptFix=FALSE):
	static {

		$Dir = NULL;
		$Path = NULL;
		$Reports = new Common\Datastore;

		////////

		$this->PrintLn($this->FormatHeading('Project Directories'), 2);

		foreach($Project->Dirs as $Dir) {
			/** @var Common\Filesystem\Directory $Dir */

			$Path = $this->App->FromProjectRoot($Dir->Path);

			if(is_link($Path)) {
				if($OptFix)
				unlink($Path);

				if(is_link($Path)) {
					$Reports->Push((object)[
						'Prefix'=> 'HM', 'Dir'=> $Dir, 'Status'=> 'primary',
						'Message'=> sprintf('exists as symlink to %s', readlink($Path))
					]);

					continue;
				}
			}

			if(is_dir($Path)) {
				$Reports->Push((object)[
					'Prefix'=> 'OK', 'Dir'=> $Dir, 'Status'=> TRUE
				]);

				continue;
			}

			if(!file_exists($Path))
			if(Common\Filesystem\Util::MkDir($Path, $Dir->Mode)) {
				$Reports->Push((object)[
					'Prefix'  => 'OK', 'Dir'=> $Dir, 'Status'=> TRUE,
					'Message' => 'NEW'
				]);

				continue;
			}

			$Reports->Push((object)[
				'Prefix' => 'ER',
				'Dir'    => $Dir,
				'Status' => FALSE
			]);

			continue;
		}

		$Reports->Each(function(object $Row) {

			$Fmt1 = $this->GetFormatForStatus($Row->Status);
			$Fmt2 = $this->GetFormatForStatus($Row->Status, 'alt1');

			$this->PrintLn(sprintf(
				'[%s] %s%s',
				$this->Format($Row->Prefix, ...$Fmt1),
				$Row->Dir->Path,
				(property_exists($Row, 'Message')
					? $this->Format(" ({$Row->Message})", ...$Fmt2)
					: ''
				)
			));

			return;
		});

		$this->PrintLn();

		return $this;
	}

	protected function
	SetupProjectLinks(Atlantis\Struct\AtlantisProjectJSON $Project, bool $OptFix=FALSE):
	static {

		$Link = NULL;
		$Path = NULL;
		$Source = NULL;
		$Reports = new Common\Datastore;

		////////

		$this->PrintLn($this->FormatHeading('Project Symlinks'), 2);

		foreach($Project->Links as $Link) {
			/** @var Common\Filesystem\Symlink $Link */

			$Path = $this->App->FromProjectRoot($Link->Path);
			$Source = $this->App->FromProjectRoot($Link->Source);

			if(is_link($Path)) {
				if(Common\Filesystem\Util::IsLinkTo($Path, $Source)) {
					$Reports->Push((object)[
						'Prefix'=> 'OK', 'Link'=> $Link, 'Status'=> TRUE
					]);

					continue;
				}

				if($OptFix) {
					if(PHP_OS_FAMILY === 'Windows') {
						if(is_dir($Path) || !file_exists(realpath($Path)))
						rmdir($Path);

						else
						unlink($Path);
					}

					else
					unlink($Path);
				}

				if(is_link($Path)) {
					$Reports->Push((object)[
						'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
						'Message'=> sprintf('exists as symlink to %s', readlink($Path))
					]);

					continue;
				}
			}

			if(is_dir($Path)) {

				if($OptFix)
				Common\Filesystem\Util::RmDir($Path);

				if(is_dir($Path)) {
					$Reports->Push((object)[
						'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
						'Message'=> 'exists as normal directory'
					]);

					continue;
				}
			}

			if(is_file($Path)) {

				if($OptFix)
				unlink($Path);

				if(is_file($Path)) {
					$Reports->Push((object)[
						'Prefix'=> 'ER', 'Link'=> $Link, 'Status'=> FALSE,
						'Message'=> 'exists as normal file'
					]);

					continue;
				}
			}

			if(symlink($Source, $Path)) {
				$Reports->Push((object)[
					'Prefix'  => 'OK',
					'Link'    => $Link,
					'Status'  => TRUE,
					'Message' => 'NEW'
				]);

				continue;
			}

			$Reports->Push((object)[
				'Prefix' => 'ER',
				'Link'   => $Link,
				'Status' => FALSE
			]);

			continue;
		}

		$Reports->Each(function(object $Row) {

			$Fmt1 = $this->GetFormatForStatus($Row->Status);
			$Fmt2 = $this->GetFormatForStatus($Row->Status, 'alt1');

			$this->PrintLn(sprintf(
				'[%s] %s%s',
				$this->Format($Row->Prefix, ...$Fmt1),
				$Row->Link->Path,
				(property_exists($Row, 'Message')
					? $this->Format(" ({$Row->Message})", ...$Fmt2)
					: ''
				)
			));

			$this->PrintLn($this->Format(
				"     {$Row->Link->Source}",
				static::FmtMuted
			), 2);

			return;
		});

		$this->PrintLn();

		return $this;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('setup-webserver')]
	#[Console\Meta\Info('Run the web server config setup tool.')]
	public function
	HandleSetupWebserver():
	int {

		$Confs = AtlantisProjectJSON::FromAppStacked($this->App);
		$Project = $Confs['Env'];
		$Server = $this->QueryUserForWebserverInfo($Project);

		/** @var AtlantisProjectJSON $Project */

		$this->PrintLn("Updating {$Project->GetFilename()}...", 2);

		$Project->Web = $Server;
		$Project->Write();

		switch($Project->Web->Type) {
			case 'apachectl':
				$this->WriteConfigApache24($Project);
				break;
		}

		return 0;
	}

	protected function
	WriteConfigApache24(AtlantisProjectJSON $Project):
	int {

		$Filename = $this->App->FromConfEnv('apache24.conf');

		////////

		if(file_exists($Filename) && !is_writable($Filename))
		throw new Common\Error\FileUnwritable($Filename);

		elseif(!is_writable(dirname($Filename)))
		throw new Common\Error\DirUnwritable($Filename);

		////////

		$this->PrintLn("Updating {$Filename}...", 2);

		file_put_contents(
			$Filename,
			$Project->Web->ToApache24($this->App)
		);

		return 0;
	}

	protected function
	QueryUserForWebserverInfo(AtlantisProjectJSON $Project):
	AtlantisProjectWebServer {

		$Server = (
			isset($Project->Web)
			? $Project->Web
			: new AtlantisProjectWebServer
		);

		$Default = function(AtlantisProjectJSON $S, string $P) {
			if(!isset($S->Web))
			return NULL;

			return $S->Web->{$P};
		};

		////////

		$this->PrintLn($this->FormatHeading('Webserver Types'), 2);
		$this->PrintLn($this->FormatBulletList(array_filter(
			array_merge([ 'lol' ], AtlantisProjectWebServer::Types),
			fn(string $Type)=> $Type !== 'lol'
		)));

		$Server->Type = $this->PromptForValue(
			'Select Type', 'integer/name',
			Required: TRUE,
			Default: $Default($Project, 'Type'),
			Filter: function(?string $In) {
				if(in_array($In, AtlantisProjectWebServer::Types))
				return $In;

				if(!is_numeric($In))
				return NULL;

				return AtlantisProjectWebServer::Type((int)$In - 1);
			}
		);

		////////

		$this->PrintLn($this->FormatHeading('Webserver Features'), 2);

		$Server->HTTPS = $this->PromptForValue(
			'Use HTTPS?', 'y/n', TRUE,
			Default: ($Default($Project, 'HTTPS') ? 'Y' : 'N'),
			Filter: Common\Filters\Numbers::BoolType(...)
		);

		////////

		$this->PrintLn($this->FormatHeading('Domains To Serve'), 2);

		while(TRUE) {

			// make an index of the ones we already have.

			$Index = $Server->Domains->MapKeys(
				fn(mixed $K, mixed $V)
				=> [ explode(' ', $V, 2)[0] => $V ]
			);

			$this->PrintLn(match(TRUE) {
				$Index->Count() > 0
				=> rtrim($this->FormatBulletList($Index)),

				default
				=> $this->Format('No domains have been added yet.', static::FmtMuted)
			}, 2);

			$this->PrintLn($this->FormatTopicList([
				'Set/Overwrite Domain Line'
				=> '@domain.tld[ secondary.tld tertiary.tld]',

				'Append to Domain Line'
				=> '+domain.tld[ secondary.tld tertiary.tld]',

				'Remove Domain Line'
				=> '-domain.tld'
			], static::FmtDefault, static::FmtMuted));

			// fetch the user input.

			$Input = $this->PromptForValue(
				'Command',
				'@dom.tld, +dom.tld, -dom.tld',
				FALSE
			);

			if($Input === NULL)
			break;

			////////

			$Bits = explode(' ', substr($Input, 1));
			$Dom = current($Bits);

			// straight up overwrite.

			if(str_starts_with($Input, '@')) {
				$Index[$Dom] = join(' ', $Bits);
			}

			// append the things from here onto there.

			elseif(str_starts_with($Input, '+')) {
				$Index[$Dom] = match($Index->HasKey($Dom)) {
					TRUE
					=> sprintf(
						'%s %s',
						$Index[$Dom],
						join(' ', array_slice($Bits, 1))
					),

					default
					=> join(' ', $Bits)
				};
			}

			// remove this line completely.

			elseif(str_starts_with($Input, '-')) {
				if($Index->HasKey($Dom))
				unset($Index[$Dom]);
			}

			// update the config with the bashed index.

			($Server->Domains)
			->SetData($Index->Values());
		}

		////////

		return $Server;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('setup-appdist')]
	public function
	HandleSetupAppDist():
	int {

		$AppRoot = $this->App->FromProjectRoot();
		$DistRoot = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'vendor', 'netherphp', 'atlantis'
		));

		////////

		$this->PrintLn($this->FormatHeading('Setup Atlantis Structure...'), 2);

		Common\Datastore::FromArray([
			Common\Filesystem\Util::Pathify($AppRoot, 'conf', 'env', 'dev'),
			Common\Filesystem\Util::Pathify($AppRoot, 'core', 'Local'),
			Common\Filesystem\Util::Pathify($AppRoot, 'data'),
			Common\Filesystem\Util::Pathify($AppRoot, 'logs'),
			Common\Filesystem\Util::Pathify($AppRoot, 'temp'),
			Common\Filesystem\Util::Pathify($AppRoot, 'www')
		])
		->Each(function(string $Dir) {
			$this->PrintLn(sprintf('[%s] %s',
				$this->Format('DIR', static::FmtAccent),
				$Dir
			));

			Common\Filesystem\Util::MkDir($Dir);
			return;
		});

		$this->PrintLn();

		////////

		$Todo = Common\Datastore::FromArray([
			Common\Filesystem\Util::Pathify('app', 'conf')
			=> 'conf',

			Common\Filesystem\Util::Pathify('app', 'routes')
			=> 'routes',

			Common\Filesystem\Util::Pathify('app', 'atlantis.json')
			=> Common\Filesystem\Util::Pathify('atlantis.json'),

			Common\Filesystem\Util::Pathify('app', 'composer.json')
			=> Common\Filesystem\Util::Pathify('composer.json'),

			Common\Filesystem\Util::Pathify('app', 'www', 'index.php')
			=> Common\Filesystem\Util::Pathify('www', 'index.php')
		]);

		$Todo->Each(function(string $Dst, string $Src) use($DistRoot, $AppRoot) {

			$Copy = Atlantis\Util::CopyWithConfirm(
				Common\Filesystem\Util::Pathify($DistRoot, $Src),
				Common\Filesystem\Util::Pathify($AppRoot, $Dst)
			);

			$Cur = NULL;

			foreach($Copy as $Cur) {
				if(is_string($Cur)) {
					$Copy->Send(!$this->PromptTrue(
						"Overwrite {$Cur}?", '[N/y]'
					));

					continue;
				}
			}

			return;
		});

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('setup-gitignore')]
	#[Console\Meta\Info('Add things this framework knows you need to .gitignore')]
	public function
	HandleSetupGitIgnore():
	int {

		$this->PrintLn($this->FormatHeading('Setup Git Ignore...'), 2);

		$File = $this->App->FromProjectRoot('.gitignore');
		$Ignore = new Atlantis\Util\GitIgnoreTool($File);

		$Ignore->Append([

			// local app things.
			'/.phpunit.cache',
			'/env.lock',
			'/backups',
			'/logs',
			'/temp',
			'/vendor',

			// web dir things.
			'/www/.well-known',
			'/www/share/atlantis', // symlink to dist (atlantis.json)
			'/www/share/nui',      // symlink to dist (atlantis.json)
			'/www/themes/default', // symlink to dist (atlantis.json)
			'/www/themes/soon',    // symlink to dist (atlantis.json)

			// data managed content things.
			'/data/blog',     // managed by db (atlantis.json)
			'/www/data/blog', // symlink to data (atlantis.json)

			'/data/qr',       // managed by db (atlantis.json)
			'/www/data/qr',   // symlink to data (atlantis.json)

			'/data/upl',      // managed by db (atlantis.json)
			'/www/data/upl',  // symlink to data (atlantis.json)

			'/data/vid',      // managed by db (atlantis.json)
			'/www/data/vid'   // symlink to data (atlantis.json)

		]);

		$Ignore->Write();

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('reboot')]
	#[Console\Meta\Error(1, 'No Web config in atlantis.json')]
	#[Console\Meta\Error(2, 'No valid server Type')]
	public function
	HandleWebserverRehash():
	int {

		$Project = AtlantisProjectJSON::FromApp($this->App);
		$Command = NULL;

		if(!isset($Project->Web))
		$this->Quit(1);

		if($Project->Web->Sudo && $this->Sudo())
		$this->Quit(0);

		////////

		switch($Project->Web->Type) {
			case 'apachectl': {
				$Command = 'apachectl graceful 2>&1';
				break;
			}
			default: {
				$this->Quit(2);
				break;
			}
		}

		////////

		$Result = $this->ExecuteCommandLine($Command);

		if($Result->Error) {
			$this->PrintLn();
			$this->PrintLn($this->Format('Command Output:', static::FmtError));
			$Result->Print('> ');
			$this->PrintLn();
		}

		return $Result->Error;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

}

exit((new DevTool)->Run());
