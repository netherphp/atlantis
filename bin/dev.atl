<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;
use Nether\Dye;
use Nether\Storage;
use Nether\User;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#[Console\Meta\Application('DevTool', '5.0.0-dev')]
#[Common\Meta\Info('Handles configuration and setup for project development.')]
class DevTool
extends Atlantis\TerminalApp {

	use
	Atlantis\Packages\DevTool\QuerySelectProjectConfig;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-08')]
	#[Console\Meta\Command('run')]
	#[Console\Meta\Info('Run one of the pre-defined command sequences from the project config.')]
	#[Console\Meta\Arg('cmdname', 'The command list to run.')]
	#[Console\Meta\Error(1, 'no command specified')]
	#[Console\Meta\Error(2, 'command not found (%s)')]
	#[Console\Meta\Toggle('--dry', 'Only make believe.')]
	#[Console\Meta\Toggle('--cmd', 'Show the command that it executes.')]
	#[Console\Meta\Toggle('--hush', 'Do not show the output of commands unless error.')]
	public function
	HandleRunCommand():
	int {

		$Confs = Atlantis\Struct\ProjectJSON::FromApp($this->App);
		$InputCmd = $this->GetInput(1) ?? NULL;

		// this was the most hillarious way to quickly pivot to the app
		// returning a stack. but i want to build this kind of merging
		// into the project json itself later anyway.

		$Conf = new Atlantis\Struct\ProjectJSON([
			'Dev' => ([
				'Run' => ([
					'Commands' => (
						Common\Struct\CommandList::FromStackMerged([], ...(
							$Confs->Map(
								fn(Atlantis\Struct\ProjectJSON $D)
								=> $D->Dev->Run->Commands
							)
							->GetData()
						))
					)
				])
			])
		]);

		////////

		$OptShowCmd = $this->GetOption('cmd') ?? FALSE;
		$OptHushOut = $this->GetOption('hush') ?? FALSE;
		$OptDry = $this->GetOption('dry') ?? FALSE;

		$Command = NULL;
		$Steps = NULL;

		$Tokens = Common\Datastore::FromArray([
			'ProjectRoot' => $this->App->GetProjectRoot()
		]);

		$PrintHelpRegardingKnownCommands = function(Atlantis\Struct\ProjectJSON $C) {

			$this->PrintLn($this->FormatHeaderPoint(
				'Known Commands:',
				static::FmtAccent
			), 2);

			$this->PrintLn(join(', ', $C->Dev->Run->Commands->Keys()), 2);

			return;
		};

		$PrintHelpRegardingJSON = function(string $Name=NULL) {

			$this->PrintLn($this->FormatHeaderPoint(
				'Project JSON:',
				static::FmtAccent
			), 2);

			$this->PrintLn(join(
				$this->Format(' > ', static::FmtMuted),
				[ 'atlantis.json', 'Dev', 'Run', 'Commands' ]
			), 2);

			$Output = Common\Filters\Text::ReadableJSON([
				'Dev' => [ 'Run' => [ 'Commands' => (
					Common\Struct\CommandList::FromArray([
						'{%CmdName%}' => [ 'Steps'=> [
							'{%CmdLabel%}'=> '{%CmdLine%}'
						] ]
					])
					->ToArray()
				) ] ]
			]);

			$Output = Common\Datastore::FromArray([
				[ 'CmdName', ($Name ?? 'your-command-name') ]
			])
			->Accumulate($Output, fn($C, $I)
				=> str_replace(
					Common\Text::TemplateMakeToken($I[0]), $I[1], $C
				)
			);

			$Output = preg_replace_callback(
				'/([\{\}]$|[\:] )/ms',
				(fn(array $M)=> $this->Format($M[0], static::FmtMuted)),
				$Output
			);

			$this->PrintLn($Output, 2);

			return;
		};

		////////

		if(!$InputCmd) {
			$PrintHelpRegardingKnownCommands($Conf);
			$this->Quit(1);
		}

		if(!$Conf->Dev->Run->Commands->HasKey($InputCmd)) {
			$PrintHelpRegardingJSON($InputCmd);
			$this->Quit(2, $InputCmd);
		}

		////////

		$Command = $Conf->Dev->Run->Commands->Get($InputCmd);
		$Steps = $Command->Steps->Map(fn($D)=> $D);

		// items with their label prefixed with a hash are disabled
		// such that they should be skipped completely by pulling them out
		// of the todo list.

		$Steps->Filter(
			fn(string $Cmd, string $Lbl)
			=> !str_starts_with($Lbl, '#')
		);

		////////

		$this->PrintLn($this->FormatHeaderBlock(sprintf(
			'%s Run: %s',
			$this->AppInfo->Name,
			$InputCmd
		)), 2);

		if(!$Steps->Count()) {
			$this->PrintLn('Nothing to do.', 2);
			return 0;
		}

		////////

		$Steps->Each(
			function(string $Command, string $Label)
			use($OptShowCmd, $OptHushOut, $OptDry, $Tokens) {

				$Cmd = match(TRUE) {

					// prefixing the command with # becomes a soft
					// skip where it will mention it skipped it.

					str_starts_with($Command, '#')
					=> NULL,

					// prefixing the command with an at-sign makes it
					// a library alias.

					str_starts_with($Command, '@')
					=> Console\CommandLibrary::FromNote(
						$Command, $Tokens
					),

					// anything else is just treated as a command
					// line string.

					default
					=> Console\CommandLibrary::FromString(
						$Command, $Tokens
					)

				};

				$CmdOutStyle = static::FmtMuted;
				$CmdOutLabel = 'STDOUT';

				$CmdStatusStyle = static::FmtOK;
				$CmdStatusLabel = 'OK';

				////////

				if($Cmd === NULL) {
					$this->PrintLn($this->FormatHeaderLine(
						"Skipped: {$Label}",
						Console\Theme::Muted
					), 2);

					return;
				}

				////////

				$this->PrintLn($this->FormatHeaderLine(
					"Step: {$Label}",
					static::FmtAccent
				), 2);

				if($OptShowCmd) {
					$this->PrintLn($this->Format(
						'Command:',
						static::FmtAccent
					));
					$this->PrintLn($Cmd, 2);
				}

				if($OptDry) {
					$this->PrintLn($this->FormatHeaderPoint(
						'DRY RUN',
						Console\Theme::Muted
					), 2);

					return;
				}

				////////

				$Result = $this->ExecuteCommandLine($Cmd, TRUE);

				if($Result->HasError()) {
					$CmdOutStyle = static::FmtError;
					$CmdStatusStyle = static::FmtError;
					$CmdStatusLabel = sprintf('ERROR: %d', $Result->Error);
					$OptHushOut = FALSE;
				}

				if(!$OptHushOut) {
					$this->PrintLn($this->FormatHeaderPoint(
						$CmdOutLabel,
						$CmdOutStyle
					), 2);

					$this->PrintLn($this->Format(
						$Result->GetOutputString(),
						$CmdOutStyle
					), 2);
				}

				$this->PrintLn($this->FormatHeaderPoint(
					$CmdStatusLabel,
					$CmdStatusStyle
				), 2);

				////////

				return;
			}
		);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('cachebust')]
	#[Console\Meta\Info('Manage the cache.bust file the theme engine uses.')]
	#[Console\Meta\Toggle('--delete', 'Delete the cache.bust file.')]
	#[Console\Meta\Toggle('--update', 'Update the cache.bust file.')]
	#[Console\Meta\Error(1, 'unable to write to directory: %s')]
	#[Console\Meta\Error(2, 'unable to overwrite file: %s')]
	#[Console\Meta\Error(3, 'failed to remove file: %s')]
	public function
	HandleUpdateCacheBuster():
	int {

		$this->PrintAppHeader('Update CacheBuster File');

		$OptDelete = $this->GetOption('delete') ?: FALSE;
		$OptUpdate = $this->GetOption('update') ?: FALSE;

		$Basename = 'data/cache.bust';
		$Filename = $this->App->FromProjectRoot($Basename);
		$Contents = file_exists($Filename) ? file_get_contents($Filename) : NULL;
		$DataBust = Common\UUID::V7();

		if($Contents === NULL) {
			if($this->App->IsDev())
			$Contents = '[Dev Mode: Random Every Load]';

			else
			$Contents = '[Empty]';
		}

		////////

		$this->PrintBulletList([
			'File'  => $Basename,
			'Value' => $Contents
		]);

		if($OptDelete) {
			$this->PrintStatusMuted("Deleting {$Filename}...");

			if(file_exists($Filename))
			unlink($Filename);

			if(file_exists($Filename))
			$this->Quit(3, $Filename);

			$this->PrintOK();
		}

		if($OptUpdate) {
			if(!file_exists($Filename)) {
				if(!is_writable(dirname($Filename)))
				$this->Quit(1, $Filename);
			}

			else {
				if(!is_writable($Filename))
				$this->Quit(2, $Filename);
			}

			$this->PrintStatusMuted("Updating {$Filename}...");

			file_put_contents($Filename, $DataBust);
			touch($Filename);

			$this->PrintOK($DataBust);
		}

		////////



		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('jsondbg')]
	#[Console\Meta\Info('Debug tool for atlantis.json')]
	#[Console\Meta\Error(1, 'no project json selected')]
	#[Console\Meta\Toggle('--struct', 'Print the parsed structure.')]
	#[Console\Meta\Toggle('--json', 'Print the JSON structure.')]
	#[Console\Meta\Toggle('--touch', 'Touch the selected JSON file.')]
	#[Console\Meta\Toggle('--rewrite', 'Rewrite the selected JSON file.')]
	#[Common\Meta\Date('2023-11-10')]
	public function
	HandleDebugAtlantisJSON():
	int {

		$Now = Common\Date::Unixtime();
		$OptStruct = $this->GetOption('struct') ?? FALSE;
		$OptJSON = $this->GetOption('json') ?? FALSE;
		$OptTouch = $this->GetOption('touch') ?? FALSE;
		$OptRewrite = $this->GetOption('rewrite') ?? FALSE;

		$Project = NULL;
		$Listable = NULL;

		////////

		$this->PrintLn($this->FormatHeaderLine(
			sprintf('%s: Project JSON Debugger', $this->AppInfo->Name)
		), 2);

		$Project = $this->QuerySelectProjectConfig();

		if(!$Project)
		$this->Quit(1);

		$this->PrintLn($this->FormatHeading('Selected:', static::FmtAccent));
		$this->PrintLn($Project->Filename, 2);

		////////

		if($OptStruct) {
			$this->PrintLn($this->FormatHeaderLine('ProjectJSON Structures'), 2);

			$Listable = Common\Datastore::FromArray(Common\Meta\PropertyListable::FromClass($Project::class));
			$Listable->Each(function(Common\Prototype\PropertyInfo $P) use($Project) {
				$this->PrintLn($this->FormatHeaderPoint("ProjectJSON.{$P->Name}", static::FmtAccent), 2);
				Common\Dump::Var($Project->{$P->Name});
				$this->PrintLn();
				return;
			});
		}

		if($OptJSON) {
			$this->PrintLn($this->FormatHeaderLine('ProjectJSON as JSON'), 2);
			$this->PrintLn($Project->ToJSON());
			$this->PrintLn();
		}

		if($OptTouch) {
			$this->PrintLn($this->FormatHeaderLine('Touching ProjectJSON'), 2);

			(function(Atlantis\Struct\ProjectJSON $P, int $T) {
				$Touched = touch($P->Filename, $T, $T);

				if($Touched)
				$this->PrintLn($this->FormatHeaderPoint(
					'OK',
					static::FmtOK
				), 2);

				else
				$this->PrintLn($this->FormatHeaderPoint(
					'Failed to touch file.',
					static::FmtError
				), 2);

				return;
			})($Project, $Now);
		}

		if($OptRewrite) {
			$this->PrintLn($this->FormatHeaderLine('Rewriting ProjectJSON'), 2);

			(function(Atlantis\Struct\ProjectJSON $P) {

				$Err = NULL;

				try { $P->Write(); }
				catch(Exception $Err) {
					$this->PrintLn($this->FormatHeaderPoint("Error: {$Err->GetMessage()}", static::FmtError), 2);
				}

				if($Err === NULL)
				$this->PrintLn($this->FormatHeaderPoint('OK', static::FmtOK), 2);

				return;
			})($Project);

		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('loc')]
	#[Console\Meta\Info('Count lines of code in the specified directories.')]
	#[Console\Meta\Arg('directory')]
	#[Console\Meta\Arg('...')]
	#[Console\Meta\Toggle('--nether', 'Include installed NetherPHP libraries.')]
	#[Console\Meta\Value('--ext', 'Comma delimited list of file extensions to include.')]
	public function
	HandleCountLinesOfCode():
	int {

		$this->PrintAppHeader('Count Lines of Code');

		$InputPaths = (
			($this->Args->Inputs->Copy())
			->Map(fn(string $P)=> realpath($P))
			->Filter(fn(?string $P)=> !!$P)
		);

		$OptNether = $this->GetOption('nether') ?? FALSE;
		$OptShowPaths = $this->GetOption('paths');
		$OptExt = $this->DigestOptionExtensions();
		$Timer = NULL;

		////////

		if($OptNether)
		$InputPaths->MergeRight($this->FetchNetherProjectSourceDirs());

		if($OptShowPaths) {
			$this->PrintLn($this->FormatHeading('Paths:'));

			$InputPaths->Each(
				fn(string $D)=>
				$this->PrintLn("{$this->Theme->GetCharBullet()} {$D}")
			);

			$this->PrintLn();
		}

		////////

		$Timer = new Common\Timer;
		$Timer->Start();

		$this->PrintStatusMuted(sprintf(
			'Seeking Files (Dir: %d, Ext: %s)...',
			$InputPaths->Count(0),
			$OptExt->Join(', ')
		));

		$Files = (
			($InputPaths)
			->Accumulate((new Common\Datastore), (
				fn(Common\Datastore $C, string $P)
				=> $C->MergeRight(Common\Filesystem\Indexer::ArrayFromPath(
					$P, TRUE, TRUE
				))
			))
			->Filter(
				fn(SplFileInfo $F)
				=> $OptExt->HasValue($F->GetExtension())
			)
		);

		$this->PrintStatusMuted(sprintf(
			'Counting Lines (Files: %d)...',
			$Files->Count()
		));

		$Count = $Files->Accumulate(0, (
			fn(int $C, SplFileInfo $F)
			=> $C + Common\Filesystem\Util::LineCount($F->GetRealPath())
		));

		$Timer->Stop();

		$this->PrintLn(sprintf(
			'%s lines across %s files. (%.3f sec)',
			number_format($Count),
			number_format($Files->Count()),
			$Timer->Get()
		), 2);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('gen-cli-html')]
	#[Console\Meta\Info('Generate the theme PHTML files for the CLI commmand helps.')]
	public function
	HandleGenDocsForCLI():
	int {

		$File = NULL;
		$Run = NULL;
		$Pathify = Common\Filesystem\Util::Pathify(...);

		$Outdir = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
			'www', 'themes', 'default',
			'area', 'sensei', 'docs', 'cli'
		));

		$Runs = [
			'project.atl help'          => $Pathify($Outdir, 'project', 'help.phtml'),
			'project.atl help init'     => $Pathify($Outdir, 'project', 'help-init.phtml'),
			'project.atl help setup'    => $Pathify($Outdir, 'project', 'help-setup.phtml'),
			'project.atl help db'       => $Pathify($Outdir, 'project', 'help-db.phtml'),
			'project.atl help dirs'     => $Pathify($Outdir, 'project', 'help-dirs.phtml'),
			'project.atl help symlinks' => $Pathify($Outdir, 'project', 'help-symlinks.phtml'),

			'ssl.atl help'              => $Pathify($Outdir, 'ssl', 'help.phtml'),
			'ssl.atl help config'       => $Pathify($Outdir, 'ssl', 'help-config.phtml'),
			'ssl.atl help renew'        => $Pathify($Outdir, 'ssl', 'help-renew.phtml'),
			'ssl.atl help cron'         => $Pathify($Outdir, 'ssl', 'help-cron.phtml'),
			'ssl.atl help lookup'       => $Pathify($Outdir, 'ssl', 'help-lookup.phtml'),

			'web.atl help'              => $Pathify($Outdir, 'web', 'help.phtml'),
			'web.atl help config'       => $Pathify($Outdir, 'web', 'help-config.phtml'),
			'web.atl help setup'        => $Pathify($Outdir, 'web', 'help-setup.phtml'),
			'web.atl help reload'       => $Pathify($Outdir, 'web', 'help-reload.phtml'),

			'dev.atl help'              => $Pathify($Outdir, 'dev', 'help.phtml'),
			'dev.atl help cachebust'    => $Pathify($Outdir, 'dev', 'help-cachebust.phtml'),
			'dev.atl help gen-cli-html' => $Pathify($Outdir, 'dev', 'help-genclihtml.phtml'),
			'dev.atl help jsondbg'      => $Pathify($Outdir, 'dev', 'help-jsondbg.phtml'),
			'dev.atl help loc'          => $Pathify($Outdir, 'dev', 'help-loc.phtml'),
			'dev.atl help run'          => $Pathify($Outdir, 'dev', 'help-run.phtml'),

			'gfx.atl help'              => $Pathify($Outdir, 'gfx', 'help.phtml'),
			'gfx.atl help genshare'     => $Pathify($Outdir, 'gfx', 'help-genshare.phtml'),
			'gfx.atl help qr'           => $Pathify($Outdir, 'gfx', 'help-qr.phtml')
		];

		foreach($Runs as $Run => $File) {
			if(!is_dir(dirname($File)))
			Common\Filesystem\Util::MkDir(dirname($File));

			$Command = sprintf(
				'%s --cli-format-html --cli-no-appheader > %s',
				$Run,
				$File
			);

			Common\Dump::Var($Run);
			system($Command);
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('classtime', TRUE)]
	public function
	HandleClassTimeline():
	int {

		// open a class look at the methods and properties and
		// print out a list sorted by when they were added.

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('vendex', TRUE)]
	#[Console\Meta\Toggle('--clean', 'Remove any old')]
	public function
	HandleVendexing():
	int {

		$Name = '.vendex';
		$Vendex = $this->App->FromProjectRoot($Name);
		$OptClean = $this->GetOption('clean');
		$Old = NULL;

		$Dirs = new Common\Datastore([
			'vendor/netherphp' => 'netherphp'
		]);

		////////

		if($OptClean) {
			$Old = $this->App->FromProjectRoot('vendex');

			if(is_dir($Old))
			Common\Filesystem\Util::RmDir($Old);

			//if(is_dir($Vendex))
			//Common\Filesystem\Util::RmDir($Old);
		}

		////////

		Common\Filesystem\Util::MkDir($Vendex);

		foreach($Dirs as $Src => $Dst) {
			$Tgt = realpath($Src);
			$Lnk = sprintf('%s/%s', $Vendex, $Dst);

			if(!$Tgt) {
				$this->PrintStatusMuted(sprintf(
					'skipping %s (not found)',
					$Src
				));

				continue;
			}

			if(file_exists($Lnk)) {
				$this->PrintStatusMuted(sprintf(
					'skipping %s (exists)',
					$Src
				));

				continue;
			}

			symlink($Tgt, $Lnk);
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('ace')]
	#[Console\Meta\Info('Generate an ace.json file listing the themes and modes.')]
	public function
	HandleAceEditorIndex():
	int {

		// ace editor has crappy archetecture. all the themes and modes
		// are just piled into the same dir as the editor itself.

		$Indir = 'www/share/atlantis/lib/ace';
		$Inpath = $this->App->FromProjectRoot($Indir);

		$Outfile = 'www/share/atlantis/lib/ace/ace.json';
		$Outpath = $this->App->FromProjectRoot($Outfile);

		$Indexer = new Common\Filesystem\Indexer($Inpath, FALSE);
		$Modes = new Common\Datastore;
		$Themes = new Common\Datastore;
		$File = NULL;
		$Base = NULL;
		$Old = NULL;
		$Err = NULL;

		// make an index of all the modes and themes that are currently
		// in this ace install.

		foreach($Indexer as $File) {
			/** @var SplFileInfo $File */
			$Base = $File->GetBasename();

			if(str_starts_with($Base, 'mode-')) {
				$Modes->Push($Base);
				continue;
			}

			if(str_starts_with($Base, 'theme-')) {
				$Themes->Push($Base);
				continue;
			}

			continue;
		}

		// if we have a data file its likely we already edited a bunch of
		// them to make their names more friendly. reuse them when possible.

		try { $Old = Common\Filesystem\Util::TryToReadFileJSON($Outpath); }
		catch(Exception $Err) { $Old = [ 'Modes'=> [], 'Themes'=> [] ]; }

		$RewriteModeNames = function(string $Key) use($Old) {
			if(array_key_exists($Key, $Old['Modes']))
			return $Old['Modes'][$Key];

			$Name = ucwords(str_replace('_', ' ', $Key));
			return $Name;
		};

		$RewriteThemeNames = function(string $Key) use($Old) {
			if(array_key_exists($Key, $Old['Themes']))
			return $Old['Themes'][$Key];

			$Name = ucwords(str_replace('_', ' ', $Key));
			return $Name;
		};

		// reformat and sort the datasets.

		($Modes)
		->Remap(fn(string $F)=> preg_replace('/mode-(.+?).js/', '$1', $F))
		->Flip()
		->RemapKeyValue(fn(string $K, string $V)=> $RewriteModeNames($K))
		->Sort();

		($Themes)
		->Remap(fn(string $F)=> preg_replace('/theme-(.+?).js/', '$1', $F))
		->Flip()
		->RemapKeyValue(fn(string $K, string $V)=> $RewriteThemeNames($K))
		->Sort();

		////////

		$JSON = Common\Filters\Text::ReadableJSON([
			'Modes' => $Modes->Export(),
			'Themes' => $Themes->Export()
		]);

		Common\Filesystem\Util::TryToWriteFile($Outpath, $JSON);

		return 0;
	}

	#[Console\Meta\Command('dyes')]
	public function
	HandleBootstrapColourExt():
	int {

		$DyeFile = $this->App->FromProjectRoot('www/themes/default/dyes.json');
		$Outfile = $this->App->FromProjectRoot('www/themes/default/css/src/ext-bootstrap/dyes.css');
		$NewLine = "\n";

		$Colours = Common\Filesystem\Util::TryToReadFileJSON($DyeFile);
		$Defines = new Common\Datastore;
		$Styles = new Common\Datastore;
		$Output = new Common\Datastore;

		////////

		$BtnPropsNormal = new Common\Datastore([
			'background: var(--theme-{%C%});',
			'border-color: var(--theme-{%C%});',
			'color: var(--theme-{%C%}-fg);'
		]);

		$BtnPropsHover = new Common\Datastore([
			'background: var(--theme-{%C%}-alt);',
			'border-color: var(--theme-{%C%}-alt);',
			'color: var(--theme-{%C%}-alt-fg);'
		]);

		$BtnPropsNormalOutline = new Common\Datastore([
			'background: transparent;',
			'border-color: var(--theme-{%C%});',
			'color: var(--theme-{%C%});'
		]);

		$BtnPropsHoverOutline = new Common\Datastore([
			'background: var(--theme-{%C%}-alt);',
			'border-color: var(--theme-{%C%}-alt);',
			'color: var(--theme-{%C%}-alt-fg);'
		]);

		$BtnKeyNormal = NULL;
		$BtnKeyHover = NULL;
		$Colour = NULL;
		$Hex = NULL;
		$Tokens = NULL;
		$Dye = NULL;

		////////

		foreach($Colours as $Colour => $Hex) {
			$Dye = Dye\Colour::From($Hex);
			$DyeAlt = Dye\Colour::From($Hex)->Lighten(0.30)->Desaturate(0.10);

			////////

			$BtnKeyNormal = sprintf(
				'.btn-%1$s',
				$Colour
			);

			$BtnKeyNormalOutline = sprintf(
				'.btn-outline-%1$s',
				$Colour
			);

			$BtnKeyHover = sprintf(
				'.btn-%1$s:active, .btn-%1$s:hover, .btn-%1$s:focus .btn-%1$s.show',
				$Colour
			);

			$BtnKeyHoverOutline = sprintf(
				'.btn-outline-%1$s:active, .btn-outline-%1$s:hover, .btn-outline-%1$s:focus .btn-outline-%1$s.show',
				$Colour
			);

			$Tokens = [ 'C'=> $Colour ];

			////////

			$Defines[sprintf('--theme-%s', $Colour)] = $Dye->ToHexRGB();
			$Defines[sprintf('--theme-%s-fg', $Colour)] = $Dye->IsDark() ? 'var(--theme-light)' : 'var(--theme-dark)';

			$Defines[sprintf('--theme-%s-alt', $Colour)] = $DyeAlt->ToHexRGB();
			$Defines[sprintf('--theme-%s-alt-fg', $Colour)] = $DyeAlt->IsDark() ? 'var(--theme-light)' : 'var(--theme-dark)';

			$Styles[$BtnKeyNormal] = $BtnPropsNormal->Map(
				fn(string $T)
				=> Common\Text::TemplateReplaceTokens($T, $Tokens)
			);

			$Styles[$BtnKeyNormalOutline] = $BtnPropsNormalOutline->Map(
				fn(string $T)
				=> Common\Text::TemplateReplaceTokens($T, $Tokens)
			);

			$Styles[$BtnKeyHover] = $BtnPropsHover->Map(
				fn(string $T)
				=> Common\Text::TemplateReplaceTokens($T, $Tokens)
			);

			$Styles[$BtnKeyHoverOutline] = $BtnPropsHoverOutline->Map(
				fn(string $T)
				=> Common\Text::TemplateReplaceTokens($T, $Tokens)
			);

			continue;
		}

		////////

		$Output->Push(':root {');
		$Defines->EachKeyValue(function(string $K, string $V) use($Output) {
			$Output->Push("\t{$K}: {$V};");
			return;
		});
		$Output->Push('}');
		$Output->Push('');

		////////

		$Output->Push('[data-bs-theme="light"] {');
		$Defines->EachKeyValue(function(string $K, string $V) use($Output) {
			if(str_contains($K, 'light'))
			$K = str_replace('light', 'dark', $K);
			else
			$K = str_replace('dark', 'light', $K);

			if(str_contains($V, 'light'))
			$V = str_replace('light', 'dark', $V);
			else
			$V = str_replace('dark', 'light', $V);

			$Output->Push("\t{$K}: {$V};");
			return;
		});
		$Output->Push('}');
		$Output->Push('');

		////////

		$Styles->EachKeyValue(function(string $K, Common\Datastore $V) use($Output) {
			$Output->Push("{$K} {");
			$V->Each(fn(string $P)=> $Output->Push("\t{$P}"));
			$Output->Push('}');
			$Output->Push('');
			return;
		});

		////////

		Common\Filesystem\Util::TryToWriteFile(
			$Outfile,
			$Output->Join($NewLine)
		);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-11-17')]
	public function
	DigestOptionExtensions():
	Common\Datastore {

		$Input = Common\Datastore::FromArray(
			explode(',', ($this->GetOption('ext') ?: 'php'))
		);

		$Input->Remap(fn(string $D)=> trim($D));

		return $Input;
	}

	#[Common\Meta\Date('2023-11-17')]
	public function
	FetchNetherProjectSourceDirs():
	Common\Datastore {

		$NetherRoot = Common\Filesystem\Util::Pathify(
			'vendor', 'netherphp'
		);

		$Output = (
			Common\Filesystem\Indexer::DatastoreFromPath(
				$this->App->FromProjectRoot($NetherRoot)
			)
			->Map(
				fn(string $D)
				=> realpath(Common\Filesystem\Util::Pathify($D, 'src'))
			)
			->Filter(
				fn(string $D)=>
				!!$D
			)
			->Sort()
		);

		return $Output;
	}

	#[Common\Meta\Date('2023-11-11')]
	public function
	WriteProjectConfig(Atlantis\Struct\ProjectJSON $Project):
	void {

		$this->PrintLn($this->FormatHeaderPoint(
			"Updating {$Project->Filename}...",
			Console\Theme::Accent
		), 2);

		if(!$Project->Write())
		throw new Common\Error\FileWriteError($Project->Filename);

		return;
	}

}

exit(DevTool::Realboot([]));
