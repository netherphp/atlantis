<?php

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;
use Nether\Storage;
use Nether\User;

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

class DevTool
extends Console\Client {

	const
	AppName    = 'Nether Atlantis Dev Tools',
	AppDesc    = 'Mostly cheat tools for working on the framework.',
	AppVersion = '5.0.0-dev',
	AppDebug   = TRUE;

	protected Atlantis\Engine
	$App;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	OnReady():
	void {

		$this->App = new Atlantis\Engine(
			Atlantis\Util::GetBinProjectDirectory(__FILE__)
		);

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('datetime')]
	#[Console\Meta\Info('Show date and time stamp info.')]
	#[Console\Meta\Value('--date', 'A date component to use as input.')]
	#[Console\Meta\Value('--time', 'A time component to use as input.')]
	#[Console\Meta\Value('--tz', 'A timezone component to use as input.')]
	#[Console\Meta\Value('--unix', 'Unix timestamp as an integer to use as input date. Overrides all other input options.')]
	public function
	DateTimeInfo():
	int {

		$Now = new Common\Date;
		$Date = NULL;
		$Key = NULL;
		$Val = NULL;

		$InputUnix = $this->GetOption('unix');
		$InputDate = $this->GetOption('date') ?? $Now->Get(Common\Values::DateFormatYMD);
		$InputTime = $this->GetOption('time') ?? $Now->Get(Common\Values::DateFormatT24V);
		$InputZone = $this->GetOption('tz') ?? $Now->Get(Common\Values::DateFormatTO);

		////////

		if($InputUnix !== NULL)
		$Date = Common\Date::FromTime($InputUnix);
		else
		$Date = Common\Date::FromDateString("{$InputDate} {$InputTime} {$InputZone}");

		////////

		$Info = [
			"Date ({$Date->Get('T')})"
			=> $Date->Get(Common\Values::DateFormatYMDT24VO),

			"Date (UTC)"
			=> $Date->SetTimezone('UTC')->Get(Common\Values::DateFormatYMDT24VO),

			"Time (UTC)"
			=> $Date->GetUnixtime(),
		];

		foreach($Info as $Key => $Val) {
			$this->PrintLn(sprintf(
				'%s: %s',
				$this->Format($Key, Bold: TRUE),
				$Val
			));
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('shove')]
	#[Console\Meta\Info('Quick shove the current state into the repository.')]
	#[Console\Meta\Toggle('--dry', 'Just pretend.')]
	public function
	ProjectShoveIntoRepo():
	int {

		$Conf = Atlantis\Struct\AtlantisProjectJSON::FromApp($this->App);
		$Steps = new Common\Datastore($Conf->StepsForShove);
		$OptDry = $this->GetOption('Dry');

		$Steps->Each(function(mixed $Line) use($OptDry) {
			if(!is_string($Line))
			return;

			// execute a command. only show the output if the command
			// resulted in an error code.

			$Cmd = NULL;

			if(str_starts_with($Line, '$$ ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoCommandLine]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine($Cmd);

				if($Result->Error) {
					$this->FormatLn('ERROR', Bold: TRUE);
					$this->PrintLn($Result->GetOutputString());
				}

				return;
			}

			// execute a command and always show the output regardless
			// of the result it had.

			if(str_starts_with($Line, '$! ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoExecuteCommand]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine(substr($Line, 3));
				$this->PrintLn($Result->GetOutputString());

				return;
			}

			return;
		});

		return 0;
	}

	#[Console\Meta\Command('release')]
	#[Console\Meta\Info('Perform all the actions needed to update this project installation.')]
	#[Console\Meta\Toggle('--dry', 'Just pretend.')]
	public function
	ProjectPullToRelease():
	int {

		$Conf = Atlantis\Struct\AtlantisProjectJSON::FromApp($this->App);
		$Steps = new Common\Datastore($Conf->StepsForRelease);
		$OptDry = $this->GetOption('Dry');

		$Steps->Each(function(mixed $Line) use($OptDry) {
			if(!is_string($Line))
			return;

			// execute a command. only show the output if the command
			// resulted in an error code.

			$Cmd = NULL;

			if(str_starts_with($Line, '$$ ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoCommandLine]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine($Cmd);

				if($Result->Error) {
					$this->FormatLn('ERROR', Bold: TRUE);
					$this->PrintLn($Result->GetOutputString());
				}

				return;
			}

			// execute a command and always show the output regardless
			// of the result it had.

			if(str_starts_with($Line, '$! ')) {
				$Cmd = substr($Line, 3);

				if($OptDry) {
					$this->PrintLn(sprintf(
						'%s %s',
						$this->Format('[PseudoExecuteCommand]', Bold: TRUE),
						$Cmd
					));

					return;
				}

				$Result = $this->ExecuteCommandLine(substr($Line, 3));
				$this->PrintLn($Result->GetOutputString());

				return;
			}

			return;
		});

		return 0;
	}

}

exit((new DevTool)->Run());
