#! /usr/bin/env php
<?php ##########################################################################
################################################################################

(function(){
	require(sprintf('%s/autoload.php', dirname(__FILE__, 4)));
	return;
})();

chdir('/opt/tg-dev');

use Nether\Atlantis;
use Nether\Common;
use Nether\Console;

use Nether\Atlantis\Social\PingDataRow;

################################################################################
################################################################################


class SocialPingTool
extends Atlantis\TerminalApp {


	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('ping')]
	#[Console\Meta\Arg('Service', 'One of the valid service names.')]
	#[Console\Meta\Arg('Handle', 'Handle used on specified service.')]
	#[Console\Meta\Toggle('--log', 'Log the ping to the DB as well.')]
	#[Console\Meta\Error(1, 'Service must be specified.')]
	#[Console\Meta\Error(2, 'Handle must be specified.')]
	public function
	HandlePing():
	int {

		$Service = $this->GetInput(1);
		$Handle = $this->GetInput(2);
		$LogToDatabase = $this->GetOption('log') ?: FALSE;

		////////

		if(!$Service)
		$this->Quit(1);

		if(!$Handle)
		$this->Quit(2);

		////////

		$Ping = match($Service) {
			(PingDataRow::Bluesky)
			=> new Atlantis\Social\Services\Bluesky,

			(PingDataRow::Mastodon)
			=> new Atlantis\Social\Services\Mastodon,

			default
			=> throw new Exception(sprintf(
				'unknown social media service [%s]',
				join(', ', Atlantis\Social\PingDataRow::Services)
			))
		};

		$Ping->SetHandle($Handle);
		$Ping->Fetch();

		////////

		$this->PrintTable(
			[ 'Handle', 'Followers'],
			[ [ $Ping->Handle, $Ping->NumFollowers ] ]
		);

		if($LogToDatabase)
		$Ping->PushToDatabase();

		return 0;
	}

	#[Console\Meta\Command('check')]
	public function
	HandleCheck():
	int {

		$Headers = [ 'ID', 'Service', 'Handle', 'Followers' ];
		$Rows = new Common\Datastore;

		////////

		$Pile = PingDataRow::Find([
			'Sort'    => 'handle-az',
			'Group'   => 'account-newest',
			'Limit'   => 0,
			'Debug'   => TRUE,
		]);

		$Pile->Remap(fn(PingDataRow $S)=> $S->ID);

		////////

		if(!$Pile->Count())
		$Pile->Push('null-null-null-null-null');

		$Data = PingDataRow::Find([
			'ID'    => $Pile->Export(),
			'Limit' => 0
		]);

		foreach($Data->Export() as $S) {
			/** @var PingDataRow $S */
			$Rows->Push([ $S->ID, $S->Service, $S->Handle, $S->NumFollowers ]);
		}

		$this->PrintTable($Headers, $Rows->Export());

		return 0;
	}

};

exit(SocialPingTool::Realboot([ ]));
