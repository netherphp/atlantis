<?php ##########################################################################
################################################################################

(function(){
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

################################################################################
################################################################################

use Nether\Atlantis;
use Nether\Browser;
use Nether\Common;
use Nether\Console;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// $ codeserver.atl install
// $ codeserver.atl run

// code-server cannot use the real vscode extension marketplace but a lot of
// devs have been double posting to openvsx and i had no idea. then after i
// made an account there it yelled at me to make a 2nd eclipse account and
// accept an eclipse agreement and it made me laugh. so i didn't bother posting
// my own but we can do vsix files anyway. moral of the story is that you have
// to get the extension id's from https://open-vsx.org or have the vsix.

#[Console\Meta\Application('CodeServerTool', '5.0.0-dev')]
#[Common\Meta\Info('Manage running a local code-server for remote development.')]
class CodeServerTool
extends Atlantis\TerminalApp {

	const
	InstallDir      = 'local/code-server',
	RunFile         = 'bin/code-server',
	WorkbenchFile   = 'lib/vscode/out/vs/code/browser/workbench/workbench.html',
	CustomStyleFile = 'src/browser/media/custom.css';

	const
	ConfDir         = 'local/code-server/conf',
	ConfFile        = 'config.yaml';

	const
	RunDir          = 'local/code-server/run';

	const
	ReleaseURL      = 'https://github.com/coder/code-server/releases/download/v4.93.1/code-server-4.93.1-linux-amd64.tar.gz',
	ReleaseHash     = 'b34e7b751c222829458e5557a7a45b14',
	ReleaseFile     = 'temp/code-server.tar.gz';

	const
	Extensions      = [
		'bmewburn.vscode-intelephense-client',
		'valeryanm.vscode-phpsab',
		'RobbOwen.synthwave-vscode',
		'https://github.com/bobmagicii/vscode-dashboard/releases/download/1.0.3/bobmagicii.dashyeah-1.0.3.vsix'
	];

	const
	CustomCSS       = [
		'https://gist.githubusercontent.com/bobmagicii/6234ef0ddb70a32271bba370176b7a62/raw/51203021e1934c4bda84f6766adf7ba2dd3a3405/custom-synthwave84-padparadscha.css'
	];

	const
	DefaultBindAddr     = '0.0.0.0:2222',
	DefaultCertFile     = 'false',
	DefaultCertKey      = 'false',
	DefaultCustomCSSURL = '{{BASE}}/_static/src/browser/media/custom.css';

	////////

	protected string
	$ProjectDomain;

	protected string
	$ProjectPath;

	protected string
	$FileBin;

	protected string
	$FileConf;

	protected Common\Datastore
	$Config;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	OnReady():
	void {

		parent::OnReady();

		$this->ProjectDomain = $this->App->Config->Get(Atlantis\Key::ConfProjectDomain);
		$this->ProjectPath = $this->App->GetProjectRoot();

		$this->FileBin = $this->GetRunFile();
		$this->FileConf = $this->GetConfFile();
		$this->Config = $this->ReadConfigFile();

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	public function
	GetRunFile():
	string {

		return Common\Filesystem\Util::Pathify(
			static::InstallDir,
			static::RunFile
		);
	}

	public function
	GetConfFile():
	string {

		return Common\Filesystem\Util::Pathify(
			static::ConfDir,
			static::ConfFile
		);
	}

	protected function
	ReadConfigFile():
	Common\Datastore {

		$Output = new Common\Datastore;
		$ConfFile = $this->GetConfFile();

		////////

		if(file_exists($ConfFile))
		(Common\Datastore::FromArray(file($ConfFile)))
		->Remap(fn(string $L)=> trim($L))
		->Filter(fn(string $L)=> str_contains($L, ': '))
		->Each(fn(string $L)=> $Output->Set( ...explode(': ', $L, 2) ));

		////////

		return $Output;
	}

	protected function
	GeneratePassword():
	string {

		return base_convert(
			str_replace('-','',Common\UUID::V4()),
			16, 36
		);
	}

	protected function
	FindCertFiles():
	?Common\Datastore {

		$Project = Atlantis\Struct\ProjectJSON::FromApp($this->App);
		$Output = NULL;

		foreach($Project as $P) {
			/** @var Atlantis\Struct\ProjectJSON $P */

			if($P->Web->Type === 'apachectl')
			$Output = $this->FindCertFiles_FromApache();

			if($Output !== NULL)
			break;
		}

		return $Output;
	}

	protected function
	FindCertFiles_FromApache():
	?Common\Datastore {

		$Output = NULL;
		$ApacheConfFile = $this->App->FromConfEnv('apache24.conf');

		$ApacheConf = NULL;
		$Certs = NULL;

		////////

		if(!file_exists($ApacheConfFile))
		return NULL;

		////////

		$Certs = new Common\Datastore;
		$ApacheConf = new Common\Datastore(file($ApacheConfFile));
		$ApacheConf->Remap(fn(string $L)=> trim($L));
		$ApacheConf->Filter(fn(string $L)=> str_starts_with($L, 'SSLCertificate'));
		$ApacheConf->Each(fn(string $L)=> match(TRUE) {
			(preg_match('/([A-Za-z]+)[\s\h]+\"(.+?)\"/', $L, $F) > 0)
			=> $Certs->Set($F[1], $F[2]),
			default
			=> NULL
		});

		$Certs->RemapKeys(function(string $K, string $V) {
			if(str_contains($K, 'Key'))
			return [ 'CertKey'=> str_replace('$SSLDomain', $this->ProjectDomain, $V) ];

			else
			return [ 'Cert'=> str_replace('$SSLDomain', $this->ProjectDomain, $V) ];
		});

		if(!$Certs->HasKey('Cert') || !$Certs->HasKey('CertKey'))
		return NULL;

		if(!file_exists($Certs->Get('Cert')))
		return NULL;

		return $Certs;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('run')]
	public function
	HandleCodeServerRun():
	int {

		$Command = NULL;
		$BindAddr = NULL;
		$Password = NULL;
		$IFace = NULL;
		$Port = NULL;
		$URL = NULL;

		$this->PrintAppHeader('Run code-server...');

		////////

		// VSCODE_IPC_HOOK_CLI
		// when you launch from a terminal from within vscode this gets
		// set and code-server smells it and tries to interact with your
		// actual vscode instead of launching itself so blank that out.

		$Command = sprintf(
			'%s --config %s %s',
			escapeshellarg($this->GetRunFile()),
			escapeshellarg($this->GetConfFile()),
			escapeshellarg($this->ProjectPath)
		);

		$Proc = new Console\ProcessRunner($Command);
		$Proc->Env->Set('VSCODE_IPC_HOOK_CLI', '');
		$Proc->Run();

		if(!$Proc->IsOK())
		$this->Quit(1);

		////////

		$BindAddr = $this->Config->Get('bind-addr');
		$Password = $this->Config->Get('password');
		list($IFace, $Port) = explode(':', $BindAddr);

		$URL = match($this->Config->Get('cert') !== static::DefaultCertFile) {
			TRUE  => sprintf('https://%s:%s', $this->ProjectDomain, $Port),
			FALSE => sprintf('http://%s:%s', $this->ProjectDomain, $Port)
		};

		$this->PrintBulletList([
			'Server' => sprintf('%s:%s', $IFace, $Port),
			'URL'    => $URL,
			'Pass'   => $Password
		]);

		$Proc->Spin();

		////////

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('install')]
	#[Console\Meta\Info('Downloads Code-Server tarball and sets it up in ./local')]
	#[Console\Meta\Error(1, 'failed to download code server')]
	public function
	HandleCodeServerInstall():
	int {

		$BindAddr    = static::DefaultBindAddr;
		$CertFile    = static::DefaultCertFile;
		$CertKey     = static::DefaultCertKey;
		$AuthPass    = $this->GeneratePassword();
		$InstallDir  = $this->App->FromProjectRoot(static::InstallDir);
		$RunDir      = $this->App->FromProjectRoot(static::RunDir);
		$Certs       = $this->FindCertFiles();

		$ReleaseURL  = static::ReleaseURL;
		$ReleaseHash = static::ReleaseHash;
		$ReleaseFile = $this->App->FromProjectRoot(static::ReleaseFile);

		$this->PrintAppHeader('Install code-server...');

		////////

		if($Certs) {
			$CertFile = $Certs->Get('Cert');
			$CertKey = $Certs->Get('CertKey');
		}

		$this->PrintH2('Downloading Server...');
		$this->HandleCodeServerInstall_DownloadReleaseTarball($ReleaseFile, $ReleaseURL, $ReleaseHash);

		$this->PrintH2('Installing Server...');
		$this->HandleCodeServerInstall_ExtractReleaseTarball($ReleaseFile, $InstallDir);
		$this->HandleCodeServerInstall_SetupDefaultConfig($RunDir, $BindAddr, $AuthPass, $CertFile, $CertKey);

		$this->PrintH2('Installing Code Extensions...');
		$this->HandleCodeServerInstall_InstallExtensions($InstallDir);

		$this->HandlePatchCustomCSS();

		////////

		return 0;
	}

	protected function
	HandleCodeServerInstall_DownloadReleaseTarball(string $ReleaseFile, string $ReleaseURL, string $ReleaseHash):
	void {

		$Timer = new Common\Timer;
		$Client = Browser\Client::FromURL($ReleaseURL);
		$Basename = basename($ReleaseURL);

		////////

		if(file_exists($ReleaseFile) && (md5_file($ReleaseFile) === $ReleaseHash)) {
			$this->PrintLn($this->FormatHeaderPoint(
				sprintf('Cached %s is OK.', $Basename),
				$this->Theme::Muted
			));
		}

		else {
			$this->PrintLn($this->FormatHeaderPoint(
				sprintf('Downloading %s...', $Basename),
				$this->Theme::Muted
			));

			$Timer->Start();
			$Client->Save($ReleaseFile);
			$Timer->Stop();

			if(md5_file($ReleaseFile) !== $ReleaseHash)
			$this->Quit(1);
		}

		////////

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('Cached as %s.', Common\Filesystem\Util::Basename($ReleaseFile, 2)),
			$this->Theme::Muted
		));

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('%.2fsec, %s', $Timer->Get(), Common\Units\Bytes::FromInt(filesize($ReleaseFile))),
			$this->Theme::OK
		), 2);

		return;
	}

	protected function
	HandleCodeServerInstall_ExtractReleaseTarball(string $ReleaseFile, string $InstallDir):
	void {

		$Timer = new Common\Timer;
		$Line = NULL;
		$Command = NULL;
		$Basename = basename($ReleaseFile);

		////////

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('Extracting %s...', $Basename),
			$this->Theme::Muted
		));

		$Line = sprintf(
			'tar -xzf %s -C %s --strip-components=1',
			escapeshellarg($ReleaseFile),
			escapeshellarg($InstallDir)
		);

		$Command = new Console\Struct\CommandLineUtil($Line);

		$Timer->Start();
		Common\Filesystem\Util::MkDir($InstallDir);
		$Command->Run();
		$Timer->Stop();

		if($Command->HasError())
		$this->Quit(2);

		////////

		$this->PrintOK(sprintf('%.2fsec', $Timer->Get()));

		return;
	}

	protected function
	HandleCodeServerInstall_SetupDefaultConfig(string $RunDir, string $BindAddr, string $Password, string $CertFile, string $CertKey):
	void {

		$ConfFile = $this->GetConfFile();
		$AuthType = ($Password ? 'password' : 'none');

		////////

		Common\Filesystem\Util::MkDir(dirname($ConfFile));
		Common\Filesystem\Util::MkDir($RunDir);

		$Config = new Common\Datastore([
			'app-name'                => sprintf('"%s"', $this->App->Config->Get(Atlantis\Key::ConfProjectName)),
			'bind-addr'               => $BindAddr,
			'auth'                    => $AuthType,
			'password'                => $Password,
			'cert'                    => $CertFile,
			'cert-key'                => $CertKey,
			'user-data-dir'           => $RunDir,
			'disable-telemetry'       => 'true',
			'disable-update-check'    => 'true',
			'disable-workspace-trust' => 'true'
		]);

		$Buffer = new Common\Overbuffer;
		$Buffer->Exec(fn() => $Config->EachKeyValue(
			fn(string $K, string $V)
			=> printf('%s: %s%s', $K, $V, PHP_EOL)
		));

		file_put_contents($ConfFile, $Buffer->Get());

		return;
	}

	protected function
	HandleCodeServerInstall_InstallExtensions():
	void {

		$Items = new Common\Datastore(static::Extensions);

		$Items->Each(function(string $EID) {

			if(str_starts_with($EID, 'https://'))
			return $this->HandleCodeServerInstall_InstallVSIX($EID);

			return $this->HandleCodeServerInstall_InstallOpenVSX($EID);
		});

		return;
	}

	protected function
	HandleCodeServerInstall_InstallVSIX(string $Filename):
	void {

		$Tmp = NULL;
		$Client = NULL;
		$Basename = basename($Filename);

		////////

		if(str_starts_with($Filename, 'https://')) {
			$Basename = basename($Filename);

			$this->PrintLn($this->FormatHeaderPoint(
				sprintf('Downloading %s...', $Basename),
				$this->Theme::Muted
			));

			$Tmp = $this->App->FromProjectRoot(sprintf('temp/%s.vsix', Common\UUID::V4()));

			$Client = Browser\Client::FromURL($Filename);
			$Client->Save($Tmp);

			$Filename = $Tmp;
		}

		////////

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('Installing %s...', $Basename),
			$this->Theme::Muted
		));

		$Line = sprintf(
			'%s --config %s --install-extension %s',
			$this->GetRunFile(),
			$this->GetConfFile(),
			escapeshellarg($Filename)
		);

		$CLI = new Console\Struct\CommandLineUtil($Line);
		$CLI->Run();

		////////

		if($Tmp !== NULL)
		if(file_exists($Tmp))
		unlink($Tmp);

		////////

		if($CLI->HasError()) {
			$this->PrintError();
			return;
		}

		$this->PrintOK();

		return;
	}

	protected function
	HandleCodeServerInstall_InstallOpenVSX(string $EID):
	void {

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('Installing %s...', $EID),
			$this->Theme::Muted
		));

		$Line = sprintf(
			'%s --config %s --install-extension %s',
			$this->GetRunFile(),
			$this->GetConfFile(),
			escapeshellarg($EID)
		);

		$CLI = new Console\Struct\CommandLineUtil($Line);
		$CLI->Run();

		////////

		if($CLI->HasError()) {
			$this->PrintError();
			return;
		}

		$this->PrintOK();

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('patch-custom-css')]
	public function
	HandlePatchCustomCSS():
	int {

		$File = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(static::InstallDir, static::WorkbenchFile));
		$CSSFile = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(static::InstallDir, static::CustomStyleFile));
		$CSSURL = static::DefaultCustomCSSURL;

		$PrintFile = str_replace(sprintf('%s%s', $this->App->GetProjectRoot(), DIRECTORY_SEPARATOR), '', $File);
		$PrintCSS = str_replace(sprintf('%s%s', $this->App->GetProjectRoot(), DIRECTORY_SEPARATOR), '', $CSSFile);

		$this->PrintAppHeader('Patch In Custom CSS');

		////////

		if(!file_exists($File))
		throw new Common\Error\RequiredDataMissing($File, 'file');

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('Patching: %s', $PrintFile),
			$this->Theme::Muted
		));

		$this->PrintLn($this->FormatHeaderPoint(
			sprintf('CSS File: %s', $PrintCSS),
			$this->Theme::Muted
		));

		////////

		$this->HandlePatchCustomCSS_WriteCustomCSSFile($CSSFile);
		$this->HandlePatchCustomCSS_PatchCustomStylesIn($File, $CSSURL);
		$this->PrintOK();

		return 0;
	}

	protected function
	HandlePatchCustomCSS_WriteCustomCSSFile(string $CSSFile):
	void {

		$CustomCSS = NULL;
		$CustomFile = NULL;
		$CustomName = NULL;
		$Client = new Browser\Client;
		$Imports = new Common\Datastore;

		foreach(static::CustomCSS as $CustomCSS) {
			$CustomName = Common\Filesystem\Util::Basename($CustomCSS);
			$CustomFile = $this->App->FromProjectRoot(Common\Filesystem\Util::Pathify(
				static::InstallDir, dirname(static::CustomStyleFile), $CustomName
			));

			$this->PrintLn($this->FormatHeaderPoint(
				sprintf('Downloading %s...', $CustomName),
				$this->Theme::Muted
			));

			$Client->SetURL($CustomCSS);
			$Client->Save($CustomFile);

			$Imports->Push(sprintf('@import url(./%s);%s', $CustomName, PHP_EOL));
		}

		Common\Filesystem\Util::TryToWriteFile(
			$CSSFile,
			$Imports->Join(PHP_EOL)
		);

		return;
	}

	protected function
	HandlePatchCustomCSS_PatchCustomStylesIn(string $File, string $CSSURL):
	void {

		$Data = Common\Filesystem\Util::TryToReadFile($File);

		////////

		if(str_contains($Data, $CSSURL)) {
			$this->PrintLn($this->FormatHeaderPoint(
				sprintf('%s is already patched for custom.css', basename($File)),
				$this->Theme::Muted
			));

			return;
		}

		////////

		$Data = str_replace(
			sprintf('%s</head>', "\t"),
			sprintf(
				'%s<link rel="stylesheet" type="text/css" href="%s" />%s%s</head>',
				"\t\t", $CSSURL, PHP_EOL, "\t"
			),
			$Data
		);

		Common\Filesystem\Util::TryToWriteFile($File, $Data);

		return;
	}

}

exit(CodeServerTool::Realboot([]));
